[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "{‘data Science, statistics and more…’}"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog!",
    "section": "",
    "text": "Hello, world! I wrote this blog to make notes of all insights that I discovered on my data science journey. I love wrangling and exploring data."
  },
  {
    "objectID": "posts/cause-of-wildfires-in-california/index.html",
    "href": "posts/cause-of-wildfires-in-california/index.html",
    "title": "Cause of Wildfires in California from 1878 - 2020",
    "section": "",
    "text": "Important facts about California Wildfire."
  },
  {
    "objectID": "posts/cause-of-wildfires-in-california/index.html#read-data",
    "href": "posts/cause-of-wildfires-in-california/index.html#read-data",
    "title": "Cause of Wildfires in California from 1878 - 2020",
    "section": "1. Read data",
    "text": "1. Read data\n\n1.1. Import library & dataset\n\n\nShow the code\n# import library\nimport pandas as pd\nimport numpy as np\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# read dataset \ndf = gpd.read_file('fire20_1.gdb')\ndf\n\n\n\n\n\n\n  \n    \n      \n      YEAR_\n      STATE\n      AGENCY\n      UNIT_ID\n      FIRE_NAME\n      INC_NUM\n      ALARM_DATE\n      CONT_DATE\n      CAUSE\n      COMMENTS\n      REPORT_AC\n      GIS_ACRES\n      C_METHOD\n      OBJECTIVE\n      FIRE_NUM\n      Shape_Length\n      Shape_Area\n      geometry\n    \n  \n  \n    \n      0\n      2020\n      CA\n      CDF\n      NEU\n      NELSON\n      00013212\n      2020-06-18T00:00:00+00:00\n      2020-06-23T00:00:00+00:00\n      11.0\n      \n      110.0\n      109.602501\n      1.0\n      1.0\n      None\n      3252.523280\n      4.435447e+05\n      MULTIPOLYGON (((-116841.251 97942.565, -116836...\n    \n    \n      1\n      2020\n      CA\n      CDF\n      NEU\n      AMORUSO\n      00011799\n      2020-06-01T00:00:00+00:00\n      2020-06-04T00:00:00+00:00\n      2.0\n      \n      670.0\n      685.585022\n      1.0\n      1.0\n      None\n      9653.760308\n      2.774464e+06\n      MULTIPOLYGON (((-117328.400 90212.407, -117321...\n    \n    \n      2\n      2020\n      CA\n      CDF\n      NEU\n      ATHENS\n      00018493\n      2020-08-10T00:00:00+00:00\n      2020-03-01T00:00:00+00:00\n      14.0\n      \n      26.0\n      27.300480\n      1.0\n      1.0\n      None\n      1649.643235\n      1.104811e+05\n      MULTIPOLYGON (((-115605.059 92988.787, -115585...\n    \n    \n      3\n      2020\n      CA\n      CDF\n      NEU\n      FLEMING\n      00007619\n      2020-03-31T00:00:00+00:00\n      2020-04-01T00:00:00+00:00\n      9.0\n      \n      13.0\n      12.931550\n      1.0\n      1.0\n      None\n      1577.155857\n      5.233211e+04\n      MULTIPOLYGON (((-110213.270 105975.579, -11020...\n    \n    \n      4\n      2020\n      CA\n      CDF\n      NEU\n      MELANESE\n      00008471\n      2020-04-14T00:00:00+00:00\n      2020-04-19T00:00:00+00:00\n      18.0\n      \n      10.3\n      10.315960\n      1.0\n      1.0\n      None\n      1035.787625\n      4.174722e+04\n      MULTIPOLYGON (((-111793.600 164243.615, -11177...\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      21313\n      2019\n      CA\n      CCO\n      LAC\n      MUREAU\n      None\n      2019-10-30T00:00:00+00:00\n      2019-10-30T00:00:00+00:00\n      NaN\n      None\n      NaN\n      6.297734\n      NaN\n      1.0\n      None\n      741.886109\n      2.548602e+04\n      MULTIPOLYGON (((122180.088 -428557.696, 122181...\n    \n    \n      21314\n      2019\n      CA\n      LRA\n      None\n      OAK\n      None\n      2019-10-28T00:00:00+00:00\n      2019-10-28T00:00:00+00:00\n      14.0\n      NPS#596 Rapid ROS in light grassy 1yr old fuels\n      NaN\n      8.482671\n      8.0\n      1.0\n      None\n      1004.069271\n      3.432815e+04\n      MULTIPOLYGON (((120221.043 -428836.863, 120220...\n    \n    \n      21315\n      2019\n      CA\n      LRA\n      LDF\n      BARHAM\n      00000845\n      2019-11-09T00:00:00+00:00\n      2019-11-10T00:00:00+00:00\n      14.0\n      LACFD 0845\n      NaN\n      64.888229\n      8.0\n      1.0\n      None\n      3383.890106\n      2.625933e+05\n      MULTIPOLYGON (((153212.742 -428811.823, 153216...\n    \n    \n      21316\n      2019\n      CA\n      NPS\n      MNP\n      STAR\n      00013598\n      None\n      None\n      14.0\n      None\n      NaN\n      66.587181\n      8.0\n      1.0\n      None\n      3897.065019\n      2.694688e+05\n      MULTIPOLYGON (((409025.711 -295687.235, 409021...\n    \n    \n      21317\n      2019\n      CA\n      LRA\n      LDF\n      SADDLE RIDGE\n      00001582\n      2019-10-10T00:00:00+00:00\n      2019-10-31T00:00:00+00:00\n      14.0\n      shape from GEOMAC, dat from CAL FIRE web\n      8799.0\n      8799.325195\n      7.0\n      1.0\n      None\n      71393.089537\n      3.560961e+07\n      MULTIPOLYGON (((132094.329 -414240.303, 132019...\n    \n  \n\n21318 rows × 18 columns\n\n\n\n\n\n1.2. Data Summary\n\n\nShow the code\n#dataset information\ndf.info()\n\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 21318 entries, 0 to 21317\nData columns (total 18 columns):\n #   Column        Non-Null Count  Dtype   \n---  ------        --------------  -----   \n 0   YEAR_         21250 non-null  object  \n 1   STATE         21315 non-null  object  \n 2   AGENCY        21313 non-null  object  \n 3   UNIT_ID       21298 non-null  object  \n 4   FIRE_NAME     21304 non-null  object  \n 5   INC_NUM       20677 non-null  object  \n 6   ALARM_DATE    15954 non-null  object  \n 7   CONT_DATE     8638 non-null   object  \n 8   CAUSE         21270 non-null  float64 \n 9   COMMENTS      19547 non-null  object  \n 10  REPORT_AC     8767 non-null   float64 \n 11  GIS_ACRES     21311 non-null  float64 \n 12  C_METHOD      9096 non-null   float64 \n 13  OBJECTIVE     21123 non-null  float64 \n 14  FIRE_NUM      17759 non-null  object  \n 15  Shape_Length  21318 non-null  float64 \n 16  Shape_Area    21318 non-null  float64 \n 17  geometry      21318 non-null  geometry\ndtypes: float64(7), geometry(1), object(10)\nmemory usage: 2.9+ MB"
  },
  {
    "objectID": "posts/cause-of-wildfires-in-california/index.html#aggregate-the-data",
    "href": "posts/cause-of-wildfires-in-california/index.html#aggregate-the-data",
    "title": "Cause of Wildfires in California from 1878 - 2020",
    "section": "2. Aggregate the data",
    "text": "2. Aggregate the data\n\nPivoting\n\n\nShow the code\nfrom mitosheet import *; register_analysis(\"id-ynheayqgsj\");\n    \n# Pivoted into df\ntmp_df = df[['YEAR_', 'CAUSE']]\npivot_table = tmp_df.pivot_table(\n    index=['YEAR_'],\n    columns=['CAUSE'],\n    values=['CAUSE'],\n    aggfunc={'CAUSE': ['count']}\n)\npivot_table.set_axis([flatten_column_header(col) for col in pivot_table.keys()], axis=1, inplace=True)\ndf_pivot = pivot_table.reset_index()\n\n# sum df_pivot\ncause = df_pivot.sum()\n\n# create new frame\ncause_df = cause.to_frame()\ncause_df.reset_index(inplace=True)\n\n# column names\ncause_df.columns = ['CAUSE', 'COUNT']\n\n# drop label '0'\ncause_df = cause_df.drop(labels=0, axis=0)\n\n# change format\ncause_df['COUNT'] = cause_df['COUNT'].astype(int)\n\n# sorting\ncause_df = cause_df.sort_values(by=['COUNT'],ascending = False)\n\n# extract string\ncause_df['CAUSE'] = cause_df.CAUSE.str.extract('(\\d+)')\ncause_df\n\n\n\n\n\n\n  \n    \n      \n      CAUSE\n      COUNT\n    \n  \n  \n    \n      14\n      14\n      9475\n    \n    \n      1\n      1\n      3454\n    \n    \n      9\n      9\n      3379\n    \n    \n      2\n      2\n      1246\n    \n    \n      7\n      7\n      903\n    \n    \n      5\n      5\n      723\n    \n    \n      10\n      10\n      454\n    \n    \n      11\n      11\n      412\n    \n    \n      4\n      4\n      380\n    \n    \n      3\n      3\n      342\n    \n    \n      8\n      8\n      196\n    \n    \n      17\n      18\n      90\n    \n    \n      6\n      6\n      80\n    \n    \n      15\n      15\n      21\n    \n    \n      18\n      19\n      17\n    \n    \n      16\n      16\n      14\n    \n    \n      13\n      13\n      11\n    \n    \n      12\n      12\n      5\n    \n  \n\n\n\n\n\n\nShow the code\ncause_df['CAUSE'] = cause_df.CAUSE.str.extract('(\\d+)')\ncause_df\n\n\n\n\n\n\n  \n    \n      \n      CAUSE\n      COUNT\n    \n  \n  \n    \n      14\n      14\n      9475\n    \n    \n      1\n      1\n      3454\n    \n    \n      9\n      9\n      3379\n    \n    \n      2\n      2\n      1246\n    \n    \n      7\n      7\n      903\n    \n    \n      5\n      5\n      723\n    \n    \n      10\n      10\n      454\n    \n    \n      11\n      11\n      412\n    \n    \n      4\n      4\n      380\n    \n    \n      3\n      3\n      342\n    \n    \n      8\n      8\n      196\n    \n    \n      17\n      18\n      90\n    \n    \n      6\n      6\n      80\n    \n    \n      15\n      15\n      21\n    \n    \n      18\n      19\n      17\n    \n    \n      16\n      16\n      14\n    \n    \n      13\n      13\n      11\n    \n    \n      12\n      12\n      5\n    \n  \n\n\n\n\n\n\nCreate categories\n\n\nShow the code\ncause_code = {'CAUSE':['1','2', '3', '4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19'], \n        'Description':['Lightning','Equipment Use','Smoking','Campfire','Debris','Railroad','Arson','Playing with Fire','Miscellaneous','Vehicle','Power Line','Firefighter Training','Non-Firefighter Training','Unidentified','Structure','Aircraft','Volcanic','Escaped Prescribed Burn','Illegal Alien Campfire']}\ncause_code = pd.DataFrame(cause_code)\ncause_code\n\n\n\n\n\n\n  \n    \n      \n      CAUSE\n      Description\n    \n  \n  \n    \n      0\n      1\n      Lightning\n    \n    \n      1\n      2\n      Equipment Use\n    \n    \n      2\n      3\n      Smoking\n    \n    \n      3\n      4\n      Campfire\n    \n    \n      4\n      5\n      Debris\n    \n    \n      5\n      6\n      Railroad\n    \n    \n      6\n      7\n      Arson\n    \n    \n      7\n      8\n      Playing with Fire\n    \n    \n      8\n      9\n      Miscellaneous\n    \n    \n      9\n      10\n      Vehicle\n    \n    \n      10\n      11\n      Power Line\n    \n    \n      11\n      12\n      Firefighter Training\n    \n    \n      12\n      13\n      Non-Firefighter Training\n    \n    \n      13\n      14\n      Unidentified\n    \n    \n      14\n      15\n      Structure\n    \n    \n      15\n      16\n      Aircraft\n    \n    \n      16\n      17\n      Volcanic\n    \n    \n      17\n      18\n      Escaped Prescribed Burn\n    \n    \n      18\n      19\n      Illegal Alien Campfire\n    \n  \n\n\n\n\n\nShow the code\ncause_final = pd.merge(cause_df,cause_code,left_on='CAUSE',right_on='CAUSE')\n\n\n\nShow the code\ncause_final = cause_final[['Description','COUNT']]\ncause_final\n\n\n\n\n\n\n  \n    \n      \n      Description\n      COUNT\n    \n  \n  \n    \n      0\n      Unidentified\n      9475\n    \n    \n      1\n      Lightning\n      3454\n    \n    \n      2\n      Miscellaneous\n      3379\n    \n    \n      3\n      Equipment Use\n      1246\n    \n    \n      4\n      Arson\n      903\n    \n    \n      5\n      Debris\n      723\n    \n    \n      6\n      Vehicle\n      454\n    \n    \n      7\n      Power Line\n      412\n    \n    \n      8\n      Campfire\n      380\n    \n    \n      9\n      Smoking\n      342\n    \n    \n      10\n      Playing with Fire\n      196\n    \n    \n      11\n      Escaped Prescribed Burn\n      90\n    \n    \n      12\n      Railroad\n      80\n    \n    \n      13\n      Structure\n      21\n    \n    \n      14\n      Illegal Alien Campfire\n      17\n    \n    \n      15\n      Aircraft\n      14\n    \n    \n      16\n      Non-Firefighter Training\n      11\n    \n    \n      17\n      Firefighter Training\n      5\n    \n  \n\n\n\n\n\n\nData visualization\n\n\nShow the code\nax = sns.barplot(x = 'COUNT', y = 'Description' , data = cause_final);\nsns.set_context(\"paper\")\nplt.title(\" Wildfire by cause from 1878 -2020\")\nplt.savefig(\"wildfire_by_cause.png\")\nplt.show()"
  },
  {
    "objectID": "posts/cause-of-wildfires-in-california/index.html#source",
    "href": "posts/cause-of-wildfires-in-california/index.html#source",
    "title": "Cause of Wildfires in California from 1878 - 2020",
    "section": "3. Source",
    "text": "3. Source\n\nWebsite : https://frap.fire.ca.gov/"
  },
  {
    "objectID": "posts/lightnings-and-drought/index.html",
    "href": "posts/lightnings-and-drought/index.html",
    "title": "Lightnings and Drought",
    "section": "",
    "text": "I found an interesting paper about lightning patterns and drought in California."
  },
  {
    "objectID": "posts/lightnings-and-drought/index.html#drought-monitoring",
    "href": "posts/lightnings-and-drought/index.html#drought-monitoring",
    "title": "Lightnings and Drought",
    "section": "Drought monitoring",
    "text": "Drought monitoring\n\nThis pie chart taken from https://droughtmonitor.unl.edu/DmData/GISData.aspx , showing data in July,19th 2022. The data is taken and updated every week.We can also compare the drought level time to time on this website.\n\nFrom the table we can see that the D4 category increased start from month 5 to today (24 July 2022)."
  },
  {
    "objectID": "posts/lightnings-and-drought/index.html#lightning-patterns",
    "href": "posts/lightnings-and-drought/index.html#lightning-patterns",
    "title": "Lightnings and Drought",
    "section": "Lightning patterns",
    "text": "Lightning patterns"
  },
  {
    "objectID": "posts/lightnings-and-drought/index.html#source",
    "href": "posts/lightnings-and-drought/index.html#source",
    "title": "Lightnings and Drought",
    "section": "Source",
    "text": "Source\nhttps://droughtmonitor.unl.edu/DmData/GISData.aspx https://www.weather.gov/media/wrh/online_publications/talite/talite1101.pdf"
  },
  {
    "objectID": "posts/southern-california-weather-analysis/index.html",
    "href": "posts/southern-california-weather-analysis/index.html",
    "title": "Southern California Weather Analysis (2010 - 2020)",
    "section": "",
    "text": "Show the code\nimport rpy2.robjects as robjects\n%load_ext rpy2.ipython\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport geopandas as gpd\nimport folium\nfrom matplotlib.pyplot import figure\nfrom tabulate import tabulate\n# plt.style.use('ggplot')\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n\nShow the code\n%R require(tidyverse)\n%R require(DataExplorer)\n%R require(readxl)\n%R options(warn=-1)\n\n\nR[write to console]: Loading required package: tidyverse\n\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nR[write to console]: Loading required package: DataExplorer\n\n\n\nR[write to console]: Loading required package: readxl\n\n\n\no{'warn': [0], }"
  },
  {
    "objectID": "posts/southern-california-weather-analysis/index.html#data-cleaning",
    "href": "posts/southern-california-weather-analysis/index.html#data-cleaning",
    "title": "Southern California Weather Analysis (2010 - 2020)",
    "section": "1. Data Cleaning",
    "text": "1. Data Cleaning\n\n1.1. Raw Data ( Northern and Southern California)\n\n\n2010\n\n\nShow the code\n%R raw_2010 <- read_excel(\"2010_weather_dataset.xlsx\")\n%R plot_missing(raw_2010)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2011\n\n\nShow the code\n%R raw_2011 <- read_excel(\"2011_weather_dataset.xlsx\")\n%R plot_missing(raw_2011)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2012\n\n\nShow the code\n%R raw_2012 <- read_excel(\"2012_weather_dataset.xlsx\")\n%R plot_missing(raw_2012)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2013\n\n\nShow the code\n%R raw_2013 <- read_excel(\"2013_weather_dataset.xlsx\")\n%R plot_missing(raw_2013)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2014\n\n\nShow the code\n%R raw_2014 <- read_excel(\"2014_weather_dataset.xlsx\")\n%R plot_missing(raw_2014)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2015\n\n\nShow the code\n%R raw_2015 <- read_excel(\"2015_weather_dataset.xlsx\")\n%R plot_missing(raw_2015)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2016\n\n\nShow the code\n%R raw_2016 <- read_excel(\"2016_weather_dataset.xlsx\")\n%R plot_missing(raw_2016)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2017\n\n\nShow the code\n%R raw_2017 <- read_excel(\"2017_weather_dataset.xlsx\")\n%R plot_missing(raw_2017)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2018\n\n\nShow the code\n%R raw_2018 <- read_excel(\"2018_weather_dataset.xlsx\")\n%R plot_missing(raw_2018)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2019\n\n\nShow the code\n%R raw_2019 <- read_excel(\"2019_weather_dataset.xlsx\")\n%R plot_missing(raw_2019)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2020\n\n\nShow the code\n%R raw_2020 <- read_excel(\"2020_weather_dataset.xlsx\")\n%R plot_missing(raw_2020)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\nNotes:\nIf we need 10 years of weather data as based for analysis, then we need to remove 5 variables: Wind Gust, Wind Chill, Heat Index, Snow, Snow Depth. We can add more variables to the data if we only use the data from 2015-2020 with Snow and Snow Depth as additional variables. The option is depend on the purpose of the analysis.\n\n\n1.2. Sort and Filtering\n\n1.2.1. Combine dataframe\n\n\nShow the code\n#combine data\ndf1 = pd.read_excel(\"2010_weather_dataset.xlsx\")\ndf2 = pd.read_excel(\"2011_weather_dataset.xlsx\")\ndf3 = pd.read_excel(\"2012_weather_dataset.xlsx\")\ndf4 = pd.read_excel(\"2013_weather_dataset.xlsx\")\ndf5 = pd.read_excel(\"2014_weather_dataset.xlsx\")\ndf6 = pd.read_excel(\"2015_weather_dataset.xlsx\")\ndf7 = pd.read_excel(\"2016_weather_dataset.xlsx\")\ndf8 = pd.read_excel(\"2017_weather_dataset.xlsx\")\ndf9 = pd.read_excel(\"2018_weather_dataset.xlsx\")\ndf10 = pd.read_excel(\"2019_weather_dataset.xlsx\")\ndf11 = pd.read_excel(\"2020_weather_dataset.xlsx\")\n\n# Read CSV files from List\ndf = pd.concat([df1,df2,df3,df4,df5,df6,df7,df8,df9,df10,df11])\ndf.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 223472 entries, 0 to 19756\nData columns (total 17 columns):\n #   Column               Non-Null Count   Dtype         \n---  ------               --------------   -----         \n 0   Name                 223472 non-null  object        \n 1   Date time            223460 non-null  datetime64[ns]\n 2   Maximum Temperature  223203 non-null  float64       \n 3   Minimum Temperature  223203 non-null  float64       \n 4   Temperature          223203 non-null  float64       \n 5   Wind Chill           93723 non-null   float64       \n 6   Heat Index           63385 non-null   float64       \n 7   Precipitation        223472 non-null  float64       \n 8   Snow                 119122 non-null  float64       \n 9   Snow Depth           119339 non-null  float64       \n 10  Wind Speed           219013 non-null  float64       \n 11  Wind Direction       218638 non-null  float64       \n 12  Wind Gust            133480 non-null  float64       \n 13  Visibility           219072 non-null  float64       \n 14  Cloud Cover          223202 non-null  float64       \n 15  Relative Humidity    219181 non-null  float64       \n 16  Conditions           223203 non-null  object        \ndtypes: datetime64[ns](1), float64(14), object(2)\nmemory usage: 30.7+ MB\n\n\n\n\n1.2.2. Create Column ‘Year’\n\n\nShow the code\ndf['Year'] = pd.DatetimeIndex(df['Date time']).year\ndf['Month'] = pd.DatetimeIndex(df['Date time']).month\ndf['Day'] = pd.DatetimeIndex(df['Date time']).day\ndf.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 223472 entries, 0 to 19756\nData columns (total 20 columns):\n #   Column               Non-Null Count   Dtype         \n---  ------               --------------   -----         \n 0   Name                 223472 non-null  object        \n 1   Date time            223460 non-null  datetime64[ns]\n 2   Maximum Temperature  223203 non-null  float64       \n 3   Minimum Temperature  223203 non-null  float64       \n 4   Temperature          223203 non-null  float64       \n 5   Wind Chill           93723 non-null   float64       \n 6   Heat Index           63385 non-null   float64       \n 7   Precipitation        223472 non-null  float64       \n 8   Snow                 119122 non-null  float64       \n 9   Snow Depth           119339 non-null  float64       \n 10  Wind Speed           219013 non-null  float64       \n 11  Wind Direction       218638 non-null  float64       \n 12  Wind Gust            133480 non-null  float64       \n 13  Visibility           219072 non-null  float64       \n 14  Cloud Cover          223202 non-null  float64       \n 15  Relative Humidity    219181 non-null  float64       \n 16  Conditions           223203 non-null  object        \n 17  Year                 223460 non-null  float64       \n 18  Month                223460 non-null  float64       \n 19  Day                  223460 non-null  float64       \ndtypes: datetime64[ns](1), float64(17), object(2)\nmemory usage: 35.8+ MB\n\n\n\n\n1.2.3. Create Column ‘County’,‘State’,‘Country’\n\n\nShow the code\ndf[[\"County\",\"State\",\"Country\"]] = df[\"Name\"].str.split(pat=',',expand=True, n = 2)\ndf.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 223472 entries, 0 to 19756\nData columns (total 23 columns):\n #   Column               Non-Null Count   Dtype         \n---  ------               --------------   -----         \n 0   Name                 223472 non-null  object        \n 1   Date time            223460 non-null  datetime64[ns]\n 2   Maximum Temperature  223203 non-null  float64       \n 3   Minimum Temperature  223203 non-null  float64       \n 4   Temperature          223203 non-null  float64       \n 5   Wind Chill           93723 non-null   float64       \n 6   Heat Index           63385 non-null   float64       \n 7   Precipitation        223472 non-null  float64       \n 8   Snow                 119122 non-null  float64       \n 9   Snow Depth           119339 non-null  float64       \n 10  Wind Speed           219013 non-null  float64       \n 11  Wind Direction       218638 non-null  float64       \n 12  Wind Gust            133480 non-null  float64       \n 13  Visibility           219072 non-null  float64       \n 14  Cloud Cover          223202 non-null  float64       \n 15  Relative Humidity    219181 non-null  float64       \n 16  Conditions           223203 non-null  object        \n 17  Year                 223460 non-null  float64       \n 18  Month                223460 non-null  float64       \n 19  Day                  223460 non-null  float64       \n 20  County               223472 non-null  object        \n 21  State                223472 non-null  object        \n 22  Country              223472 non-null  object        \ndtypes: datetime64[ns](1), float64(17), object(5)\nmemory usage: 40.9+ MB\n\n\n\n\n1.2.4. Drop Column ‘Wind Chill’, ‘Wind Gust’, ‘Snow’, ‘Snow Depth’, ‘Heat Index’\n\n\nShow the code\ndf.drop(['Wind Chill', 'Wind Gust', 'Snow', 'Snow Depth', 'Heat Index'], axis =1, inplace= True)\ndf.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 223472 entries, 0 to 19756\nData columns (total 18 columns):\n #   Column               Non-Null Count   Dtype         \n---  ------               --------------   -----         \n 0   Name                 223472 non-null  object        \n 1   Date time            223460 non-null  datetime64[ns]\n 2   Maximum Temperature  223203 non-null  float64       \n 3   Minimum Temperature  223203 non-null  float64       \n 4   Temperature          223203 non-null  float64       \n 5   Precipitation        223472 non-null  float64       \n 6   Wind Speed           219013 non-null  float64       \n 7   Wind Direction       218638 non-null  float64       \n 8   Visibility           219072 non-null  float64       \n 9   Cloud Cover          223202 non-null  float64       \n 10  Relative Humidity    219181 non-null  float64       \n 11  Conditions           223203 non-null  object        \n 12  Year                 223460 non-null  float64       \n 13  Month                223460 non-null  float64       \n 14  Day                  223460 non-null  float64       \n 15  County               223472 non-null  object        \n 16  State                223472 non-null  object        \n 17  Country              223472 non-null  object        \ndtypes: datetime64[ns](1), float64(12), object(5)\nmemory usage: 32.4+ MB\n\n\n\n\n1.2.5. Create Southern California Dataframe\nList Of County in Soutern California:\nSan Bernardino San Diego Imperial Los Angeles Orange San Luis Obispo Santa Barbara Ventura Riverside\n\nShow the code\n# Filtered County\ndf_south = df[df['County'].apply(lambda val: all(val != s for s in ['Yuba City', 'Yolo', 'Tuolumne', 'Tulare', 'Trinity', 'Tehama', 'Sutter', 'Stanislaus', 'Sonoma', 'Solano', 'Siskiyou', 'Sierra City', 'Shasta', 'Santa Cruz', 'Santa Clara', 'San Mateo', 'San Joaquín', 'San Joaquin', 'San Francisco', 'San Benito', 'Sacramento', 'Plumas', 'Placer', 'Nevada City', 'Napa', 'Monterey', 'Mono', 'Modoc', 'Merced', 'Mendocino', 'Mariposa', 'Marin', 'Madera', 'Lassen', 'Lake City', 'Inyo', 'Humboldt', 'Glenn', 'Fresno', 'El Dorado', 'Del Norte', 'County Line Rd', 'Contra Costa', 'Colusa', 'California City', 'California', 'Calaveras', 'Butte City', 'Amador City', 'Alpine', 'Alameda']))]\n\n\nShow the code\n# Changed Year to dtype int\ndf_south['Year'] = df_south['Year'].fillna(0).astype('int')\n\n# Filtered Year\nsouth_2010 = df_south[~df_south['Year'].isin([2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020])]\nsouth_2011 = df_south[~df_south['Year'].isin([2010, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020])]\nsouth_2012 = df_south[~df_south['Year'].isin([2010, 2011, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020])]\nsouth_2013 = df_south[~df_south['Year'].isin([2010, 2011, 2012, 2014, 2015, 2016, 2017, 2018, 2019, 2020])]\nsouth_2014 = df_south[~df_south['Year'].isin([2010, 2011, 2012, 2013, 2015, 2016, 2017, 2018, 2019, 2020])]\nsouth_2015 = df_south[~df_south['Year'].isin([2010, 2011, 2012, 2013, 2014, 2016, 2017, 2018, 2019, 2020])]\nsouth_2016 = df_south[~df_south['Year'].isin([2010, 2011, 2012, 2013, 2014, 2015, 2017, 2018, 2019, 2020])]\nsouth_2017 = df_south[~df_south['Year'].isin([2010, 2011, 2012, 2013, 2014, 2015, 2016, 2018, 2019, 2020])]\nsouth_2018 = df_south[~df_south['Year'].isin([2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2019, 2020])]\nsouth_2019 = df_south[~df_south['Year'].isin([2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2020])]\nsouth_2020 = df_south[~df_south['Year'].isin([2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019])]"
  },
  {
    "objectID": "posts/southern-california-weather-analysis/index.html#check-for-missing-values",
    "href": "posts/southern-california-weather-analysis/index.html#check-for-missing-values",
    "title": "Southern California Weather Analysis (2010 - 2020)",
    "section": "2. Check for missing values",
    "text": "2. Check for missing values\n\n2010\n\n\nShow the code\n%R -i south_2010\n%R plot_missing(south_2010)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2011\n\n\nShow the code\n%R -i south_2011\n%R plot_missing(south_2011)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2012\n\n\nShow the code\n%R -i south_2012\n%R plot_missing(south_2012)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2013\n\n\nShow the code\n%R -i south_2013\n%R plot_missing(south_2013)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2014\n\n\nShow the code\n%R -i south_2014\n%R plot_missing(south_2014)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2015\n\n\nShow the code\n%R -i south_2015\n%R plot_missing(south_2015)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2016\n\n\nShow the code\n%R -i south_2016\n%R plot_missing(south_2016)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2017\n\n\nShow the code\n%R -i south_2017\n%R plot_missing(south_2017)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2018\n\n\nShow the code\n%R -i south_2018\n%R plot_missing(south_2018)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2019\n\n\nShow the code\n%R -i south_2019\n%R plot_missing(south_2019)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\n\n2020\n\n\nShow the code\n%R -i south_2020\n%R plot_missing(south_2020)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }"
  },
  {
    "objectID": "posts/southern-california-weather-analysis/index.html#notes-1",
    "href": "posts/southern-california-weather-analysis/index.html#notes-1",
    "title": "Southern California Weather Analysis (2010 - 2020)",
    "section": "Notes:",
    "text": "Notes:\nAbove are cleaned 10 years of weather data in Southern California with 5 Variables had been removed ( Wind Chill, Wind Gust, Snow, Snow Depth, Heat Index)"
  },
  {
    "objectID": "posts/southern-california-weather-analysis/index.html#create-combine-csv",
    "href": "posts/southern-california-weather-analysis/index.html#create-combine-csv",
    "title": "Southern California Weather Analysis (2010 - 2020)",
    "section": "3. Create & Combine CSV",
    "text": "3. Create & Combine CSV\n\nShow the code\nsouth_2010.to_csv(\"south_2010.csv\")\nsouth_2011.to_csv(\"south_2011.csv\")\nsouth_2012.to_csv(\"south_2012.csv\")\nsouth_2013.to_csv(\"south_2013.csv\")\nsouth_2014.to_csv(\"south_2014.csv\")\nsouth_2015.to_csv(\"south_2015.csv\")\nsouth_2016.to_csv(\"south_2016.csv\")\nsouth_2017.to_csv(\"south_2017.csv\")\nsouth_2018.to_csv(\"south_2018.csv\")\nsouth_2019.to_csv(\"south_2019.csv\")\nsouth_2020.to_csv(\"south_2020.csv\")\n\n\n\nShow the code\nclean_df = pd.concat([south_2010, south_2011, south_2012, south_2013, south_2014, south_2015, south_2016, south_2017, south_2018, south_2019, south_2020])\nclean_df.head()\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Conditions\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n  \n  \n    \n      5475\n      Imperial, CA, United States\n      2010-01-01\n      69.3\n      37.2\n      52.4\n      0.0\n      8.0\n      252.79\n      9.9\n      0.0\n      35.89\n      Clear\n      2010\n      1.0\n      1.0\n      Imperial\n      CA\n      United States\n    \n    \n      5476\n      Imperial, CA, United States\n      2010-01-02\n      73.2\n      39.6\n      55.3\n      0.0\n      5.9\n      210.79\n      9.7\n      0.1\n      32.16\n      Clear\n      2010\n      1.0\n      2.0\n      Imperial\n      CA\n      United States\n    \n    \n      5477\n      Imperial, CA, United States\n      2010-01-03\n      75.0\n      37.8\n      55.9\n      0.0\n      7.9\n      168.78\n      9.9\n      0.0\n      32.29\n      Clear\n      2010\n      1.0\n      3.0\n      Imperial\n      CA\n      United States\n    \n    \n      5478\n      Imperial, CA, United States\n      2010-01-04\n      73.7\n      41.1\n      55.3\n      0.0\n      7.0\n      253.29\n      9.9\n      1.4\n      29.90\n      Clear\n      2010\n      1.0\n      4.0\n      Imperial\n      CA\n      United States\n    \n    \n      5479\n      Imperial, CA, United States\n      2010-01-05\n      73.7\n      39.6\n      54.9\n      0.0\n      8.1\n      272.92\n      9.9\n      0.1\n      31.93\n      Clear\n      2010\n      1.0\n      5.0\n      Imperial\n      CA\n      United States\n    \n  \n\n\n\n\n\nShow the code\nclean_df.to_csv(\"clean_df.csv\")"
  },
  {
    "objectID": "posts/southern-california-weather-analysis/index.html#analysis",
    "href": "posts/southern-california-weather-analysis/index.html#analysis",
    "title": "Southern California Weather Analysis (2010 - 2020)",
    "section": "4. Analysis",
    "text": "4. Analysis\n\n4.1. Descriptive Analysis by County\n\n4.1.1. San Bernardino\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[34.94560256738246, -116.18973420594098], popup=\" San Bernardino\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\nShow the code\nsb_df = clean_df[(clean_df['County'] == 'San Bernardino')]\nsb_df.head()\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Conditions\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n  \n  \n    \n      12412\n      San Bernardino, CA, United States\n      2010-01-01\n      69.8\n      40.7\n      54.0\n      0.0\n      5.8\n      151.21\n      9.9\n      20.1\n      46.13\n      Clear\n      2010\n      1.0\n      1.0\n      San Bernardino\n      CA\n      United States\n    \n    \n      12413\n      San Bernardino, CA, United States\n      2010-01-02\n      79.2\n      45.7\n      59.4\n      0.0\n      7.7\n      113.17\n      9.9\n      7.5\n      35.92\n      Clear\n      2010\n      1.0\n      2.0\n      San Bernardino\n      CA\n      United States\n    \n    \n      12414\n      San Bernardino, CA, United States\n      2010-01-03\n      75.0\n      39.9\n      56.4\n      0.0\n      7.0\n      71.29\n      9.9\n      21.7\n      32.01\n      Clear\n      2010\n      1.0\n      3.0\n      San Bernardino\n      CA\n      United States\n    \n    \n      12415\n      San Bernardino, CA, United States\n      2010-01-04\n      73.7\n      43.1\n      56.1\n      0.0\n      6.6\n      121.00\n      9.9\n      44.1\n      31.66\n      Partially cloudy\n      2010\n      1.0\n      4.0\n      San Bernardino\n      CA\n      United States\n    \n    \n      12416\n      San Bernardino, CA, United States\n      2010-01-05\n      76.0\n      41.0\n      55.4\n      0.0\n      4.8\n      107.38\n      9.9\n      16.8\n      36.39\n      Clear\n      2010\n      1.0\n      5.0\n      San Bernardino\n      CA\n      United States\n    \n  \n\n\n\n\n\n\nShow the code\n#check for missing values\n%R -i sb_df\n%R plot_missing(sb_df)\n%R options(warn=-1)\n\n\n\n\n\no{'warn': [-1], }\n\n\n\nShow the code\ncol= ['Maximum Temperature',\n           'Minimum Temperature',\n           'Temperature',\n           'Precipitation',\n           'Wind Speed', \n           'Wind Direction',\n           'Visibility',\n           'Cloud Cover', \n           'Relative Humidity'\n]\n\n\n4.1.1.1. Data Distributions\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nsb_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.title(\"Variable Distributions\")\nplt.show()\n\n\n\n\n\n\n\n4.1.1.2. Variables by Year\n\n\nShow the code\nsb_year = sb_df.groupby(['Year']).mean()\nsb_year= sb_year.drop(\"Month\",axis=1)\nsb_year = sb_year.drop(\"Day\",axis=1)\nplt.style.use('ggplot')\nsb_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\nShow the code\nsb_year.mean()\n\n\nMaximum Temperature     79.047006\nMinimum Temperature     53.545194\nTemperature             65.148645\nPrecipitation            0.026720\nWind Speed              12.249097\nWind Direction         182.976397\nVisibility               9.416136\nCloud Cover             28.604549\nRelative Humidity       54.718165\ndtype: float64\n\n\n\n\n4.1.1.3. Variables by Month\n\n\nShow the code\nsb_month = sb_df.groupby([\"Month\"]).mean()\nsb_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      67.338123\n      44.230499\n      54.888270\n      0.062581\n      9.241935\n      128.790821\n      9.185044\n      34.169501\n      54.333724\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      67.626367\n      44.123794\n      55.187460\n      0.056785\n      10.539871\n      149.202926\n      9.186495\n      33.796463\n      57.540707\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      71.413490\n      47.524340\n      58.681818\n      0.040880\n      12.095894\n      172.013109\n      9.325220\n      37.910850\n      59.909853\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      75.764545\n      50.836364\n      62.387273\n      0.022424\n      13.953030\n      195.304333\n      9.545152\n      34.596667\n      55.955182\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      78.345748\n      54.379472\n      65.285044\n      0.009707\n      14.193842\n      216.254340\n      9.454839\n      37.792669\n      59.589208\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      86.920000\n      59.387576\n      71.664242\n      0.003758\n      14.137273\n      236.277788\n      9.026667\n      24.055758\n      58.100091\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      92.602639\n      64.531965\n      77.098240\n      0.006510\n      14.345455\n      238.813226\n      10.014956\n      19.119941\n      53.441935\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      94.345748\n      65.439296\n      78.278299\n      0.006422\n      14.100293\n      224.903402\n      9.435777\n      14.441056\n      51.008915\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      91.183636\n      63.054545\n      75.563636\n      0.005788\n      13.370909\n      195.790364\n      10.089394\n      19.193333\n      51.147091\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      82.731672\n      56.386217\n      68.299120\n      0.013196\n      11.680059\n      170.376393\n      9.183871\n      25.765396\n      52.461789\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      73.777273\n      48.284848\n      59.954242\n      0.026394\n      9.977273\n      138.765364\n      9.325152\n      28.986970\n      49.552939\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      65.886804\n      43.775367\n      53.914076\n      0.067273\n      9.282698\n      127.346334\n      9.212023\n      33.627273\n      53.679707\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nsb_month= sb_month.drop(\"Year\",axis=1)\nsb_month = sb_month.drop(\"Day\",axis=1)\n\nsb_month.plot(figsize=(14, 8))\nplt.savefig(\"sb_month.jpg\") #save as jpg\nplt.show()\n\n\n\n\n\n\n\n4.1.1.4. Overall Conditions\n\n\nShow the code\nsb_cnd = sb_df.groupby(['Conditions']).count()\nsb_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n      2168\n    \n    \n      Overcast\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n      113\n    \n    \n      Partially cloudy\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n      1197\n    \n    \n      Rain\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n      43\n    \n    \n      Rain, Overcast\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n      217\n    \n    \n      Rain, Partially cloudy\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n      257\n    \n    \n      Snow\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n    \n    \n      Snow, Overcast\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n      8\n    \n    \n      Snow, Partially cloudy\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions \ntotal_cnd = sb_cnd['Year']\nexplode = [0.2, 0, 0, 0, 0, 0, 0, 0, 0]\n\nconditions = sb_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nfont1 = {'family':'serif','color':'black','size':20}\nplt.figure(figsize=(10, 8))\nplt.title(\"San Bernardino\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.savefig(\"sb_pie.jpg\") #save as jpg\nplt.show()\n\n\n\n\n\n\n\n4.1.1.5. Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased time to time, start from January and reached the highest score at 238.813226 in July. Average Conditions in San Bernardino are Clear and partially cloudy with 12% of rain.\n\n\n\n4.1.2. San Diego\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[32.715759, -117.163818], popup=\" San Diego\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\nShow the code\nsd_df = clean_df[(clean_df['County'] == 'San Diego')]\nsd_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4018 entries, 12777 to 12077\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   Name                 4018 non-null   object        \n 1   Date time            4018 non-null   datetime64[ns]\n 2   Maximum Temperature  4018 non-null   float64       \n 3   Minimum Temperature  4018 non-null   float64       \n 4   Temperature          4018 non-null   float64       \n 5   Precipitation        4018 non-null   float64       \n 6   Wind Speed           4018 non-null   float64       \n 7   Wind Direction       4018 non-null   float64       \n 8   Visibility           4018 non-null   float64       \n 9   Cloud Cover          4018 non-null   float64       \n 10  Relative Humidity    4018 non-null   float64       \n 11  Conditions           4018 non-null   object        \n 12  Year                 4018 non-null   int64         \n 13  Month                4018 non-null   float64       \n 14  Day                  4018 non-null   float64       \n 15  County               4018 non-null   object        \n 16  State                4018 non-null   object        \n 17  Country              4018 non-null   object        \ndtypes: datetime64[ns](1), float64(11), int64(1), object(5)\nmemory usage: 596.4+ KB\n\n\n\n4.1.2.1. Data Distributions\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nsd_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.show()\n\n\n\n\n\n\n\n4.1.2.2. Variables by Year\n\n\nShow the code\nsd_year = sb_df.groupby(['Year']).mean()\nsd_year\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Month\n      Day\n    \n    \n      Year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2010\n      76.245205\n      51.445753\n      62.792329\n      0.053918\n      11.761918\n      181.546027\n      9.027123\n      31.174795\n      58.950603\n      6.526027\n      15.720548\n    \n    \n      2011\n      76.722740\n      51.063836\n      62.743836\n      0.023233\n      11.571507\n      174.400767\n      9.122466\n      28.895342\n      56.169123\n      6.526027\n      15.720548\n    \n    \n      2012\n      79.507377\n      53.477596\n      65.278689\n      0.019672\n      11.891530\n      181.687022\n      9.738251\n      29.625410\n      54.137596\n      6.513661\n      15.756831\n    \n    \n      2013\n      78.791781\n      53.120274\n      64.751233\n      0.011699\n      11.863288\n      187.343890\n      9.311507\n      28.979178\n      52.967096\n      6.526027\n      15.720548\n    \n    \n      2014\n      80.878356\n      55.550137\n      67.063562\n      0.018164\n      12.182740\n      188.641205\n      9.986849\n      26.807945\n      52.073616\n      6.526027\n      15.720548\n    \n    \n      2015\n      80.135890\n      54.966301\n      66.457260\n      0.021315\n      12.135342\n      183.559671\n      9.469041\n      28.986575\n      52.714301\n      6.526027\n      15.720548\n    \n    \n      2016\n      79.843716\n      54.532787\n      66.050000\n      0.033060\n      12.508470\n      187.178634\n      9.348087\n      29.439071\n      54.205219\n      6.513661\n      15.756831\n    \n    \n      2017\n      80.224384\n      54.323288\n      66.095616\n      0.024329\n      12.535890\n      184.818658\n      9.443014\n      26.674247\n      56.320712\n      6.526027\n      15.720548\n    \n    \n      2018\n      79.624384\n      54.091781\n      65.658356\n      0.018959\n      13.036712\n      189.095260\n      9.409315\n      30.324658\n      54.176795\n      6.526027\n      15.720548\n    \n    \n      2019\n      77.324658\n      52.891507\n      63.981370\n      0.044411\n      12.577534\n      178.278712\n      9.293973\n      30.671781\n      58.580795\n      6.526027\n      15.720548\n    \n    \n      2020\n      80.218579\n      53.533880\n      65.762842\n      0.025164\n      12.675137\n      176.190519\n      9.427869\n      23.071038\n      51.603962\n      6.513661\n      15.756831\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nsd_year= sd_year.drop(\"Month\",axis=1)\nsd_year = sd_year.drop(\"Day\",axis=1)\n\nsd_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.2.3. Variables by Month\n\n\nShow the code\nsd_month = sd_df.groupby([\"Month\"]).mean()\nsd_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      66.684751\n      51.268035\n      58.515836\n      0.048094\n      11.083284\n      167.868827\n      8.950440\n      53.078006\n      62.250909\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      66.099035\n      52.360772\n      58.994855\n      0.047556\n      12.440836\n      186.927331\n      9.115756\n      53.132476\n      61.922154\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      67.232258\n      55.538710\n      61.029619\n      0.034135\n      12.550440\n      207.504252\n      9.279179\n      58.644868\n      64.851525\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      68.722424\n      57.973333\n      62.997273\n      0.024061\n      13.051212\n      221.290152\n      9.369394\n      59.199091\n      64.978697\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      69.018182\n      60.616422\n      64.363636\n      0.014956\n      12.631672\n      231.854545\n      9.392082\n      67.672141\n      67.177977\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      70.742727\n      62.887879\n      66.214242\n      0.000879\n      11.380303\n      238.583242\n      9.379091\n      71.320606\n      72.417848\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      74.851906\n      66.705572\n      70.063050\n      0.008680\n      11.628152\n      253.026276\n      9.514956\n      67.307918\n      73.374047\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      76.870381\n      68.005865\n      71.657185\n      0.001760\n      11.575367\n      254.587273\n      9.399413\n      60.158358\n      72.930469\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      77.727576\n      67.151515\n      71.777273\n      0.004576\n      12.033333\n      240.909273\n      9.110606\n      53.584545\n      70.952091\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      75.734018\n      63.036070\n      68.869208\n      0.017038\n      11.295894\n      203.494164\n      9.100000\n      51.657771\n      65.693460\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      71.054545\n      56.006970\n      63.102424\n      0.036182\n      11.428788\n      177.701879\n      9.106667\n      48.887273\n      61.087424\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      66.145161\n      50.993255\n      58.213783\n      0.072346\n      11.008211\n      166.503196\n      8.983578\n      54.478299\n      62.507185\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nsd_month= sd_month.drop(\"Year\",axis=1)\nsd_month = sd_month.drop(\"Day\",axis=1)\nsd_month.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.2.4. Overall Conditions\n\n\nShow the code\nsd_cnd = sd_df.groupby(['Conditions']).count()\nsd_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n    \n    \n      Overcast\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n    \n    \n      Partially cloudy\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n    \n    \n      Rain\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n    \n    \n      Rain, Overcast\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n    \n    \n      Rain, Partially cloudy\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions\ntotal_cnd = sd_cnd['Year']\nexplode = [0, 0, 0.2, 0, 0, 0]\n\nconditions = sd_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nfont1 = {'family':'serif','color':'black','size':20}\nplt.figure(figsize=(14, 8))\nplt.title(\"San Diego\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.show()\n\n\n\n\n\n\n\n4.1.1.5 Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased time to time, start from January and reached the highest score at 254.587273 in August. Average Conditions in San Diego are Partially Cloudy and Overcast with 13% of rain.\n\n\n\n4.1.3. Imperial\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[32.834766264823294, -115.57766145113908], popup=\" Imperial\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n4.1.3.1. Data Distributions\n\n\nShow the code\nimp_df = clean_df[(clean_df['County'] == 'Imperial')]\nimp_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4018 entries, 5475 to 4757\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   Name                 4018 non-null   object        \n 1   Date time            4018 non-null   datetime64[ns]\n 2   Maximum Temperature  4018 non-null   float64       \n 3   Minimum Temperature  4018 non-null   float64       \n 4   Temperature          4018 non-null   float64       \n 5   Precipitation        4018 non-null   float64       \n 6   Wind Speed           4018 non-null   float64       \n 7   Wind Direction       4018 non-null   float64       \n 8   Visibility           4018 non-null   float64       \n 9   Cloud Cover          4018 non-null   float64       \n 10  Relative Humidity    4018 non-null   float64       \n 11  Conditions           4018 non-null   object        \n 12  Year                 4018 non-null   int64         \n 13  Month                4018 non-null   float64       \n 14  Day                  4018 non-null   float64       \n 15  County               4018 non-null   object        \n 16  State                4018 non-null   object        \n 17  Country              4018 non-null   object        \ndtypes: datetime64[ns](1), float64(11), int64(1), object(5)\nmemory usage: 596.4+ KB\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nimp_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.show()\n\n\n\n\n\n\n\n4.1.3.2. Variables by Year\n\n\nShow the code\nimp_year = imp_df.groupby(['Year']).mean()\nimp_year\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Month\n      Day\n    \n    \n      Year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2010\n      86.790685\n      60.014521\n      73.212877\n      0.015014\n      14.732603\n      206.984493\n      9.823836\n      4.549041\n      37.508795\n      6.526027\n      15.720548\n    \n    \n      2011\n      87.101918\n      58.825205\n      72.759452\n      0.003671\n      14.273425\n      211.350603\n      9.818082\n      4.336712\n      35.932575\n      6.526027\n      15.720548\n    \n    \n      2012\n      88.822131\n      60.636066\n      74.482240\n      0.004945\n      13.155191\n      200.960437\n      9.776503\n      5.468306\n      36.795820\n      6.513661\n      15.756831\n    \n    \n      2013\n      87.962192\n      60.020822\n      73.626301\n      0.007726\n      13.837260\n      212.195863\n      9.837260\n      4.971233\n      35.099808\n      6.526027\n      15.720548\n    \n    \n      2014\n      89.607123\n      61.942192\n      75.578904\n      0.005699\n      13.884384\n      204.658849\n      9.773973\n      4.737534\n      35.217068\n      6.526027\n      15.720548\n    \n    \n      2015\n      89.069863\n      62.241644\n      75.432055\n      0.004822\n      13.973425\n      209.759068\n      9.821370\n      5.787123\n      36.445507\n      6.526027\n      15.720548\n    \n    \n      2016\n      90.271585\n      62.152732\n      76.043169\n      0.005301\n      14.492896\n      207.571421\n      9.783333\n      6.162022\n      35.581503\n      6.513661\n      15.756831\n    \n    \n      2017\n      89.767397\n      62.406575\n      75.810137\n      0.005699\n      14.198630\n      209.452192\n      9.803014\n      8.475616\n      36.884247\n      6.526027\n      15.720548\n    \n    \n      2018\n      89.341918\n      62.129041\n      75.533973\n      0.005205\n      13.858904\n      205.811205\n      9.790685\n      6.089589\n      35.225123\n      6.526027\n      15.720548\n    \n    \n      2019\n      85.901096\n      59.505479\n      72.446301\n      0.006164\n      14.801644\n      216.867342\n      9.740000\n      6.747397\n      38.829370\n      6.526027\n      15.720548\n    \n    \n      2020\n      89.381694\n      60.822131\n      74.786339\n      0.004317\n      13.741257\n      206.825082\n      9.804372\n      8.046995\n      34.453497\n      6.513661\n      15.756831\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nimp_year= imp_year.drop(\"Month\",axis=1)\nimp_year = imp_year.drop(\"Day\",axis=1)\n\nimp_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.3.3 Variables by Month\n\n\nShow the code\nimp_month = imp_df.groupby([\"Month\"]).mean()\nimp_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      70.300587\n      43.339296\n      55.843988\n      0.012991\n      10.650733\n      222.918739\n      9.662170\n      9.178299\n      47.091965\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      73.429582\n      46.395498\n      59.567203\n      0.007814\n      13.045981\n      216.637299\n      9.791318\n      8.727331\n      42.860900\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      80.481525\n      53.156891\n      66.873607\n      0.007361\n      15.715836\n      228.856129\n      9.842815\n      5.759824\n      36.479267\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      86.930909\n      58.489697\n      72.953636\n      0.001818\n      17.384242\n      225.761061\n      9.853333\n      3.989091\n      31.299394\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      92.604106\n      63.434311\n      78.327859\n      0.002082\n      17.958358\n      218.661848\n      9.815249\n      2.526979\n      29.367478\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      104.088788\n      72.644848\n      88.613333\n      0.000485\n      16.570303\n      191.088758\n      9.841515\n      2.353333\n      25.502697\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      107.154252\n      80.714076\n      93.924047\n      0.005337\n      15.563343\n      168.996217\n      9.839296\n      8.309384\n      32.574692\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      107.600293\n      81.597067\n      94.489150\n      0.007654\n      14.531378\n      168.002346\n      9.826100\n      6.160704\n      33.554927\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      101.696667\n      74.314242\n      87.986061\n      0.006455\n      13.132727\n      193.342667\n      9.837879\n      5.641818\n      33.924606\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      90.688270\n      62.324340\n      76.091789\n      0.004487\n      11.887977\n      218.858446\n      9.849267\n      3.642229\n      33.813548\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      78.182424\n      50.787273\n      63.568182\n      0.006242\n      11.613030\n      228.623576\n      9.773030\n      5.060000\n      39.400485\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      68.624633\n      43.589150\n      55.167155\n      0.011877\n      10.963930\n      219.956129\n      9.641056\n      9.998827\n      48.394897\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nimp_month= imp_month.drop(\"Year\",axis=1)\nimp_month = imp_month.drop(\"Day\",axis=1)\nimp_month.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.3.4. Overall Conditions\n\n\nShow the code\nimp_cnd = imp_df.groupby(['Conditions']).count()\nimp_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n      3631\n    \n    \n      Overcast\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n      3\n    \n    \n      Partially cloudy\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n      200\n    \n    \n      Rain\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n      64\n    \n    \n      Rain, Overcast\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n      26\n    \n    \n      Rain, Partially cloudy\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n      94\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions\ntotal_cnd = imp_cnd['Year']\nexplode = [0.2, 0, 0, 0, 0, 0]\n\nconditions = imp_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nplt.figure(figsize=(14, 8))\nplt.title(\"Imperial\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.show()\n\n\n\n\n\n\n\n4.1.3.5. Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased dynamically, start from January and reached the highest score at 228.856129 in February and at 228.623576 in November . Average Conditions in Imperial County are Clear with 5% of rain.\n\n\n\n4.1.4. Los Angeles\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[34.39569370680407, -118.12912286449068], popup=\" Los Angeles\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n4.1.4.1. Data Distributions\n\n\nShow the code\nla_df = clean_df[(clean_df['County'] == 'Los Angeles')]\nla_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4018 entries, 6571 to 5855\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   Name                 4018 non-null   object        \n 1   Date time            4018 non-null   datetime64[ns]\n 2   Maximum Temperature  4018 non-null   float64       \n 3   Minimum Temperature  4018 non-null   float64       \n 4   Temperature          4018 non-null   float64       \n 5   Precipitation        4018 non-null   float64       \n 6   Wind Speed           4018 non-null   float64       \n 7   Wind Direction       4018 non-null   float64       \n 8   Visibility           4018 non-null   float64       \n 9   Cloud Cover          4018 non-null   float64       \n 10  Relative Humidity    4018 non-null   float64       \n 11  Conditions           4018 non-null   object        \n 12  Year                 4018 non-null   int64         \n 13  Month                4018 non-null   float64       \n 14  Day                  4018 non-null   float64       \n 15  County               4018 non-null   object        \n 16  State                4018 non-null   object        \n 17  Country              4018 non-null   object        \ndtypes: datetime64[ns](1), float64(11), int64(1), object(5)\nmemory usage: 596.4+ KB\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nla_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.show()\n\n\n\n\n\n\n\n4.1.4.2. Variables by Year\n\n\nShow the code\nla_year = la_df.groupby(['Year']).mean()\nla_year\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Month\n      Day\n    \n    \n      Year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2010\n      72.383836\n      57.084384\n      63.785753\n      0.055589\n      7.456164\n      181.119096\n      8.795068\n      31.832329\n      62.164575\n      6.526027\n      15.720548\n    \n    \n      2011\n      71.416438\n      55.304658\n      62.417534\n      0.026712\n      7.268493\n      175.855918\n      9.053699\n      29.416712\n      63.341973\n      6.526027\n      15.720548\n    \n    \n      2012\n      72.927869\n      56.692350\n      63.767486\n      0.016913\n      7.117486\n      178.702377\n      9.007650\n      28.775956\n      64.033743\n      6.513661\n      15.756831\n    \n    \n      2013\n      73.487671\n      56.753425\n      63.991781\n      0.008466\n      7.216712\n      178.563123\n      9.118904\n      28.604658\n      60.718411\n      6.526027\n      15.720548\n    \n    \n      2014\n      75.731507\n      59.204932\n      66.440274\n      0.020466\n      8.021644\n      177.300795\n      9.120000\n      24.567397\n      62.047260\n      6.526027\n      15.720548\n    \n    \n      2015\n      76.082192\n      59.489589\n      66.767671\n      0.019726\n      8.215068\n      182.680986\n      9.188493\n      25.131233\n      59.824548\n      6.526027\n      15.720548\n    \n    \n      2016\n      74.447541\n      58.369399\n      65.397541\n      0.024071\n      8.436612\n      184.148989\n      9.138525\n      28.101913\n      63.576858\n      6.513661\n      15.756831\n    \n    \n      2017\n      75.521918\n      59.068767\n      66.271781\n      0.027726\n      8.525753\n      186.593233\n      9.106575\n      26.232877\n      63.262000\n      6.526027\n      15.720548\n    \n    \n      2018\n      74.453151\n      58.576712\n      65.501370\n      0.018137\n      8.504110\n      186.206767\n      8.944658\n      28.070685\n      64.002274\n      6.526027\n      15.720548\n    \n    \n      2019\n      72.821644\n      57.714247\n      64.497534\n      0.044603\n      10.402192\n      191.425836\n      9.035342\n      30.993425\n      62.924000\n      6.526027\n      15.720548\n    \n    \n      2020\n      75.828142\n      58.728142\n      66.192623\n      0.021694\n      8.056831\n      195.785027\n      8.613115\n      23.281694\n      59.317650\n      6.513661\n      15.756831\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nla_year= la_year.drop(\"Month\",axis=1)\nla_year = la_year.drop(\"Day\",axis=1)\nla_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.4.3. Variables by Month\n\n\nShow the code\nla_month = la_df.groupby([\"Month\"]).mean()\nla_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      68.397067\n      50.090029\n      58.243109\n      0.061760\n      6.465396\n      153.780997\n      8.839296\n      23.016716\n      57.683871\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      67.701929\n      50.614469\n      58.443408\n      0.055498\n      7.970096\n      169.424019\n      8.835691\n      27.363023\n      59.625145\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      69.554545\n      53.612317\n      60.777713\n      0.045308\n      8.832845\n      179.877214\n      8.998534\n      30.912610\n      62.366950\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      71.667576\n      56.228485\n      63.192727\n      0.017515\n      9.792121\n      194.281848\n      9.271818\n      28.700303\n      60.494818\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      72.173314\n      58.751906\n      64.734311\n      0.008299\n      9.574194\n      196.709824\n      9.270968\n      39.268915\n      65.040674\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      75.586667\n      62.153333\n      67.844545\n      0.000121\n      8.706061\n      202.901576\n      8.977273\n      42.627879\n      68.899152\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      80.230205\n      65.282991\n      71.605572\n      0.001466\n      8.692669\n      213.102874\n      9.178299\n      27.036657\n      68.283988\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      82.139589\n      66.262463\n      72.863343\n      0.000235\n      8.502933\n      207.495455\n      8.953959\n      21.522581\n      66.792405\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      82.263939\n      65.715152\n      72.690000\n      0.008030\n      8.353030\n      194.847061\n      8.987273\n      22.534242\n      64.456273\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      79.088856\n      61.924927\n      69.305572\n      0.012023\n      7.436657\n      175.608563\n      8.974780\n      25.560411\n      60.954721\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      72.934242\n      54.436061\n      62.630909\n      0.023394\n      6.745152\n      159.273879\n      8.968788\n      21.947273\n      55.945121\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      67.099120\n      49.403519\n      57.331672\n      0.077097\n      6.283578\n      153.914252\n      8.865396\n      22.363343\n      56.748035\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nla_month= la_month.drop(\"Year\",axis=1)\nla_month = la_month.drop(\"Day\",axis=1)\nla_month.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.4.4. Overall Conditions\n\n\nShow the code\nla_cnd = sd_df.groupby(['Conditions']).count()\nla_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n      505\n    \n    \n      Overcast\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n      930\n    \n    \n      Partially cloudy\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n      2070\n    \n    \n      Rain\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n      5\n    \n    \n      Rain, Overcast\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n      275\n    \n    \n      Rain, Partially cloudy\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n      233\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions\ntotal_cnd = la_cnd['Year']\nexplode = [0, 0, 0.2, 0, 0, 0]\n\nconditions = imp_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nplt.figure(figsize=(14, 8))\nplt.title(\"Los Angeles\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.show()\n\n\n\n\n\n\n\n4.1.4.5. Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased time to time, start from January and reached the highest score at 207.495455 in August. Average Conditions in Los Angeles County are Partially Cloudy and Overcast with 13% of rain.\n\n\n\n4.1.5. Orange\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[33.76382457863042, -117.87660720812386], popup=\" Orange\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n4.1.5.1. Data Distributions\n\n\nShow the code\nor_df = clean_df[(clean_df['County'] == 'Orange')]\nor_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4018 entries, 10586 to 9881\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   Name                 4018 non-null   object        \n 1   Date time            4018 non-null   datetime64[ns]\n 2   Maximum Temperature  4018 non-null   float64       \n 3   Minimum Temperature  4018 non-null   float64       \n 4   Temperature          4018 non-null   float64       \n 5   Precipitation        4018 non-null   float64       \n 6   Wind Speed           4018 non-null   float64       \n 7   Wind Direction       4018 non-null   float64       \n 8   Visibility           4018 non-null   float64       \n 9   Cloud Cover          4018 non-null   float64       \n 10  Relative Humidity    4018 non-null   float64       \n 11  Conditions           4018 non-null   object        \n 12  Year                 4018 non-null   int64         \n 13  Month                4018 non-null   float64       \n 14  Day                  4018 non-null   float64       \n 15  County               4018 non-null   object        \n 16  State                4018 non-null   object        \n 17  Country              4018 non-null   object        \ndtypes: datetime64[ns](1), float64(11), int64(1), object(5)\nmemory usage: 596.4+ KB\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nor_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.show()\n\n\n\n\n\n\n\n4.1.5.2. Variables by Year\n\n\nShow the code\nor_year = or_df.groupby(['Year']).mean()\nor_year\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Month\n      Day\n    \n    \n      Year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2010\n      72.440822\n      55.396438\n      63.090959\n      0.064877\n      9.855890\n      165.149205\n      8.868219\n      39.554247\n      64.048658\n      6.526027\n      15.720548\n    \n    \n      2011\n      72.507397\n      54.537260\n      62.645205\n      0.031123\n      9.799178\n      160.567890\n      8.960000\n      37.630685\n      64.094712\n      6.526027\n      15.720548\n    \n    \n      2012\n      75.253825\n      57.581967\n      65.463934\n      0.024809\n      9.606557\n      152.270847\n      9.131694\n      38.930874\n      62.185000\n      6.513661\n      15.756831\n    \n    \n      2013\n      74.832055\n      56.462466\n      64.700822\n      0.010849\n      9.667945\n      161.113699\n      9.220548\n      37.744932\n      60.242712\n      6.526027\n      15.720548\n    \n    \n      2014\n      77.608767\n      59.507397\n      67.708219\n      0.018110\n      9.922466\n      151.857479\n      9.287397\n      35.348493\n      60.012055\n      6.526027\n      15.720548\n    \n    \n      2015\n      76.685205\n      58.538082\n      66.796164\n      0.017616\n      9.750137\n      152.320329\n      9.382740\n      35.616438\n      60.857178\n      6.526027\n      15.720548\n    \n    \n      2016\n      75.290710\n      57.472404\n      65.536339\n      0.031066\n      10.254918\n      162.385546\n      9.319126\n      38.005191\n      63.198197\n      6.513661\n      15.756831\n    \n    \n      2017\n      75.549589\n      57.709315\n      65.782740\n      0.027178\n      10.181644\n      163.837726\n      9.198082\n      35.395068\n      66.250822\n      6.526027\n      15.720548\n    \n    \n      2018\n      75.224932\n      58.019452\n      65.717260\n      0.018795\n      10.368219\n      161.950822\n      9.132603\n      39.030959\n      63.199123\n      6.526027\n      15.720548\n    \n    \n      2019\n      73.402466\n      57.125479\n      64.492055\n      0.053178\n      10.344384\n      156.823123\n      9.247945\n      38.670411\n      62.920164\n      6.526027\n      15.720548\n    \n    \n      2020\n      76.496995\n      58.178962\n      66.395355\n      0.021038\n      10.162568\n      155.890410\n      9.205464\n      33.592350\n      60.746038\n      6.513661\n      15.756831\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nor_year= or_year.drop(\"Month\",axis=1)\nor_year = or_year.drop(\"Day\",axis=1)\n\nor_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.5.3 Variables by Month\n\n\nShow the code\nor_month = or_df.groupby([\"Month\"]).mean()\nor_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      68.652493\n      48.448680\n      57.722581\n      0.071672\n      8.616129\n      111.916129\n      8.785044\n      34.991496\n      60.818416\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      68.156913\n      49.106109\n      58.098714\n      0.061511\n      9.811576\n      134.875981\n      8.991318\n      35.799357\n      61.271125\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      69.904985\n      52.560411\n      60.626393\n      0.037214\n      10.325806\n      157.648358\n      9.211437\n      40.813196\n      63.239912\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      72.413939\n      55.280303\n      63.250000\n      0.018061\n      11.210000\n      175.576242\n      9.489091\n      39.538485\n      61.265303\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      73.280938\n      58.532551\n      65.240176\n      0.010029\n      11.329912\n      187.598035\n      9.504985\n      47.629326\n      64.499296\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      76.778485\n      62.414545\n      68.520303\n      0.003848\n      10.888788\n      191.809333\n      9.289091\n      48.991212\n      67.334242\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      81.530205\n      66.256012\n      72.759531\n      0.003959\n      10.597654\n      198.999795\n      9.382405\n      36.987977\n      66.256188\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      83.747801\n      67.030499\n      74.128446\n      0.000616\n      10.458651\n      197.850352\n      9.352786\n      31.474780\n      64.796510\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      83.908182\n      65.604545\n      73.570303\n      0.005727\n      9.952727\n      173.158758\n      9.150606\n      30.106364\n      62.954545\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      79.930792\n      60.917302\n      69.496774\n      0.025484\n      9.478299\n      142.951378\n      9.075073\n      33.815836\n      60.691613\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      74.007273\n      53.012424\n      62.574545\n      0.028576\n      8.697879\n      121.196788\n      9.074545\n      31.450606\n      57.185242\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      67.634604\n      48.194428\n      57.230792\n      0.081818\n      8.548094\n      107.934868\n      8.818475\n      35.058651\n      59.807390\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nor_month= or_month.drop(\"Year\",axis=1)\nor_month = or_month.drop(\"Day\",axis=1)\nor_month.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.5.4. Overall Conditions\n\n\nShow the code\nor_cnd = or_df.groupby(['Conditions']).count()\nor_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n      1417\n    \n    \n      Overcast\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n      205\n    \n    \n      Partially cloudy\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n      1732\n    \n    \n      Rain\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n      106\n    \n    \n      Rain, Overcast\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n      194\n    \n    \n      Rain, Partially cloudy\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n      364\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions\ntotal_cnd = or_cnd['Year']\nexplode = [0, 0, 0.2, 0, 0, 0]\n\nconditions = or_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nplt.figure(figsize=(14, 8))\nplt.title(\"Orange\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.show()\n\n\n\n\n\n\n\n4.1.5.5 Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased time to time, start from January and reached the highest score at 213.102874 in July. Average Conditions in Orange County are Partially Cloudy and Overcast with 13% of rain.\n\n\n\n4.1.6. San Luis Obispo\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[35.27907764280072, -120.65940043567326], popup=\" San Luis Obispo\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n4.1.6.1. Data Distributions\n\n\nShow the code\nslo_df = clean_df[(clean_df['County'] == 'San Luis Obispo')]\nslo_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4018 entries, 13872 to 13168\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   Name                 4018 non-null   object        \n 1   Date time            4018 non-null   datetime64[ns]\n 2   Maximum Temperature  4018 non-null   float64       \n 3   Minimum Temperature  4018 non-null   float64       \n 4   Temperature          4018 non-null   float64       \n 5   Precipitation        4018 non-null   float64       \n 6   Wind Speed           4018 non-null   float64       \n 7   Wind Direction       4018 non-null   float64       \n 8   Visibility           4018 non-null   float64       \n 9   Cloud Cover          4018 non-null   float64       \n 10  Relative Humidity    4018 non-null   float64       \n 11  Conditions           4018 non-null   object        \n 12  Year                 4018 non-null   int64         \n 13  Month                4018 non-null   float64       \n 14  Day                  4018 non-null   float64       \n 15  County               4018 non-null   object        \n 16  State                4018 non-null   object        \n 17  Country              4018 non-null   object        \ndtypes: datetime64[ns](1), float64(11), int64(1), object(5)\nmemory usage: 596.4+ KB\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nslo_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.show()\n\n\n\n\n\n\n\n4.1.6.2 Variables by Year\n\n\nShow the code\nslo_year = slo_df.groupby(['Year']).mean()\nslo_year\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Month\n      Day\n    \n    \n      Year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2010\n      68.956712\n      48.120548\n      56.877260\n      0.092740\n      15.968767\n      220.865973\n      8.924110\n      37.893699\n      75.711507\n      6.526027\n      15.720548\n    \n    \n      2011\n      69.513425\n      47.931781\n      56.909863\n      0.051397\n      15.836438\n      219.443123\n      9.079726\n      34.849863\n      73.473315\n      6.526027\n      15.720548\n    \n    \n      2012\n      70.825410\n      48.507650\n      57.744536\n      0.043115\n      16.040164\n      221.830137\n      9.057650\n      35.301913\n      71.131749\n      6.513661\n      15.756831\n    \n    \n      2013\n      72.375068\n      47.750137\n      57.785479\n      0.008767\n      16.586575\n      218.695370\n      9.214795\n      28.975616\n      68.921041\n      6.526027\n      15.720548\n    \n    \n      2014\n      74.075890\n      51.567671\n      60.933151\n      0.030027\n      16.474521\n      224.525644\n      9.274247\n      33.704384\n      67.993233\n      6.526027\n      15.720548\n    \n    \n      2015\n      74.254247\n      51.172055\n      60.807123\n      0.019699\n      16.423014\n      221.942356\n      9.360274\n      30.699726\n      67.061562\n      6.526027\n      15.720548\n    \n    \n      2016\n      74.096175\n      51.585246\n      60.922131\n      0.042869\n      16.151366\n      223.190792\n      9.112022\n      34.682514\n      68.504809\n      6.513661\n      15.756831\n    \n    \n      2017\n      74.256438\n      51.430959\n      61.003562\n      0.055397\n      16.376986\n      218.219315\n      9.251781\n      29.850411\n      66.135781\n      6.526027\n      15.720548\n    \n    \n      2018\n      72.562740\n      49.208767\n      59.003562\n      0.034192\n      16.717808\n      219.835452\n      9.262740\n      28.893425\n      68.661507\n      6.526027\n      15.720548\n    \n    \n      2019\n      70.051233\n      48.693425\n      57.777808\n      0.051945\n      15.621644\n      209.951260\n      9.154795\n      34.502740\n      71.725096\n      6.526027\n      15.720548\n    \n    \n      2020\n      73.028415\n      49.370492\n      59.281967\n      0.019317\n      16.002732\n      217.762404\n      9.006011\n      27.410929\n      68.246120\n      6.513661\n      15.756831\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nslo_year= slo_year.drop(\"Month\",axis=1)\nslo_year = slo_year.drop(\"Day\",axis=1)\nslo_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.6.3. Variables by Month\n\n\nShow the code\nslo_month = slo_df.groupby([\"Month\"]).mean()\nslo_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      66.308504\n      43.323754\n      53.265689\n      0.112581\n      13.457771\n      163.994721\n      9.283284\n      29.031085\n      69.864516\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      65.732476\n      43.845016\n      53.594534\n      0.083537\n      15.493891\n      186.808971\n      9.105466\n      32.919293\n      70.436527\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      67.354839\n      46.478886\n      55.577713\n      0.090968\n      16.926393\n      207.572082\n      9.081232\n      37.388270\n      72.294282\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      69.431212\n      48.270909\n      57.379697\n      0.031091\n      18.805152\n      246.610152\n      9.176970\n      32.827273\n      70.602182\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      70.715836\n      50.252493\n      59.087977\n      0.011848\n      19.108798\n      264.547801\n      9.295894\n      39.404692\n      70.618622\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      74.864545\n      53.013636\n      62.043636\n      0.002485\n      17.892727\n      264.716545\n      9.134242\n      33.855758\n      71.490242\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      77.495894\n      55.661290\n      64.087390\n      0.003959\n      15.819648\n      262.980440\n      9.228739\n      36.178886\n      72.715894\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      78.440176\n      56.506745\n      64.718475\n      0.000117\n      16.560997\n      264.034985\n      9.108504\n      37.243109\n      72.990088\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      80.100303\n      55.355455\n      65.006061\n      0.000394\n      16.731515\n      236.955485\n      8.968788\n      28.644242\n      69.368182\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      78.658944\n      53.030499\n      63.492669\n      0.021789\n      16.247507\n      200.300293\n      9.019355\n      26.905279\n      64.157801\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      71.373333\n      46.254848\n      56.941818\n      0.043061\n      14.096364\n      171.173606\n      9.210303\n      25.211212\n      66.003848\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      65.365103\n      42.567449\n      52.554545\n      0.089413\n      13.283871\n      164.664545\n      9.230499\n      29.335777\n      66.802610\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nslo_month= slo_month.drop(\"Year\",axis=1)\nslo_month = slo_month.drop(\"Day\",axis=1)\nslo_month.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.6.4. Overall Conditions\n\n\nShow the code\nslo_cnd = slo_df.groupby(['Conditions']).count()\nslo_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n      1891\n    \n    \n      Overcast\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n      185\n    \n    \n      Partially cloudy\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n      1392\n    \n    \n      Rain\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n      33\n    \n    \n      Rain, Overcast\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n      278\n    \n    \n      Rain, Partially cloudy\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n      239\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions\ntotal_cnd = slo_cnd['Year']\nexplode = [0.2, 0, 0, 0, 0, 0]\n\nconditions = slo_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nplt.figure(figsize=(14, 8))\nplt.title(\"San Luis Obispo\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.show()\n\n\n\n\n\n\n\n4.1.6.5. Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased time to time, start from January and reached the highest score at 264.716545 in June. Average Conditions in San Luis Obispo County are Clear Partially Cloudy with 14% of rain.\n\n\n\n4.1.7. Santa Barbara\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[34.429096458941736, -119.71278822477801], popup=\" Santa Barbara\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n4.1.7.1. Data Distributions\n\n\nShow the code\nsbr_df = clean_df[(clean_df['County'] == 'Santa Barbara')]\nsbr_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4018 entries, 14602 to 13900\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   Name                 4018 non-null   object        \n 1   Date time            4018 non-null   datetime64[ns]\n 2   Maximum Temperature  4018 non-null   float64       \n 3   Minimum Temperature  4018 non-null   float64       \n 4   Temperature          4018 non-null   float64       \n 5   Precipitation        4018 non-null   float64       \n 6   Wind Speed           4018 non-null   float64       \n 7   Wind Direction       4018 non-null   float64       \n 8   Visibility           4018 non-null   float64       \n 9   Cloud Cover          4018 non-null   float64       \n 10  Relative Humidity    4018 non-null   float64       \n 11  Conditions           4018 non-null   object        \n 12  Year                 4018 non-null   int64         \n 13  Month                4018 non-null   float64       \n 14  Day                  4018 non-null   float64       \n 15  County               4018 non-null   object        \n 16  State                4018 non-null   object        \n 17  Country              4018 non-null   object        \ndtypes: datetime64[ns](1), float64(11), int64(1), object(5)\nmemory usage: 596.4+ KB\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nsbr_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.show()\n\n\n\n\n\n\n\n4.1.7.2. Variables by Year\n\n\nShow the code\nsbr_year = sbr_df.groupby(['Year']).mean()\nsbr_year\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Month\n      Day\n    \n    \n      Year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2010\n      66.630411\n      50.232877\n      57.895890\n      0.073178\n      12.067945\n      163.635671\n      8.665479\n      34.349315\n      75.194822\n      6.526027\n      15.720548\n    \n    \n      2011\n      67.086027\n      49.384932\n      57.679726\n      0.049753\n      11.580274\n      160.953808\n      8.801370\n      29.960274\n      73.621890\n      6.526027\n      15.720548\n    \n    \n      2012\n      68.226503\n      49.954918\n      58.540437\n      0.034836\n      11.226503\n      168.785519\n      8.904372\n      29.741257\n      74.333825\n      6.513661\n      15.756831\n    \n    \n      2013\n      69.669589\n      50.398356\n      59.301370\n      0.012603\n      11.487123\n      161.632986\n      8.847123\n      26.413973\n      69.535945\n      6.526027\n      15.720548\n    \n    \n      2014\n      72.182740\n      53.257808\n      62.281918\n      0.030466\n      12.069315\n      160.467041\n      9.197534\n      26.673973\n      68.458027\n      6.526027\n      15.720548\n    \n    \n      2015\n      72.659178\n      53.160000\n      62.395616\n      0.013205\n      12.191233\n      164.449507\n      9.181918\n      24.200822\n      68.607041\n      6.526027\n      15.720548\n    \n    \n      2016\n      70.028689\n      51.866940\n      60.503825\n      0.036749\n      12.586066\n      164.232432\n      8.983880\n      29.347268\n      73.232131\n      6.513661\n      15.756831\n    \n    \n      2017\n      70.236438\n      51.702466\n      60.271507\n      0.051397\n      11.906027\n      164.428959\n      8.697260\n      28.337260\n      74.987342\n      6.526027\n      15.720548\n    \n    \n      2018\n      70.071233\n      51.466849\n      60.323562\n      0.026493\n      11.979452\n      166.510137\n      8.995616\n      27.093425\n      72.321699\n      6.526027\n      15.720548\n    \n    \n      2019\n      68.418904\n      50.811781\n      59.187945\n      0.062712\n      12.214521\n      166.053479\n      8.933699\n      31.258356\n      73.852822\n      6.526027\n      15.720548\n    \n    \n      2020\n      70.421858\n      50.524044\n      59.814208\n      0.021694\n      11.886612\n      162.804098\n      8.674317\n      25.802186\n      71.495246\n      6.513661\n      15.756831\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nsbr_year= sbr_year.drop(\"Month\",axis=1)\nsbr_year = sbr_year.drop(\"Day\",axis=1)\nsbr_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.7.3 Variables by Month\n\n\nShow the code\nsbr_month = sbr_df.groupby([\"Month\"]).mean()\nsbr_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      64.942815\n      43.632258\n      53.596188\n      0.106393\n      10.498534\n      134.504721\n      9.244868\n      23.208798\n      70.319443\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      64.223473\n      44.340514\n      54.006752\n      0.084309\n      12.071383\n      148.414534\n      8.972669\n      26.890675\n      69.899711\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      65.789443\n      47.732551\n      56.509971\n      0.079472\n      13.382698\n      168.705396\n      8.964809\n      31.476540\n      71.733783\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      67.987273\n      50.178485\n      58.785455\n      0.025485\n      13.858485\n      184.140606\n      9.063939\n      28.007273\n      69.816061\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      69.021994\n      52.447214\n      60.480352\n      0.008710\n      13.796188\n      188.139531\n      9.015249\n      30.964516\n      71.484047\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      70.106667\n      55.908485\n      62.613030\n      0.005788\n      11.795455\n      178.172364\n      8.410909\n      42.090606\n      77.923091\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      73.524633\n      58.967742\n      65.489443\n      0.000557\n      11.830205\n      185.384575\n      8.697947\n      34.973314\n      78.446217\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      74.814663\n      59.116422\n      66.092669\n      0.000147\n      11.263930\n      176.293372\n      8.634897\n      27.664809\n      78.153167\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      75.935455\n      57.756970\n      66.106667\n      0.001606\n      11.457576\n      172.236576\n      8.467879\n      25.886061\n      75.480879\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      74.857771\n      53.681818\n      63.683284\n      0.020205\n      11.189736\n      153.212053\n      8.903226\n      25.376246\n      69.766598\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      69.359394\n      46.895758\n      57.450000\n      0.032909\n      11.007879\n      143.183727\n      9.240909\n      21.328788\n      66.847121\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      64.357771\n      42.856305\n      52.884457\n      0.086393\n      10.995601\n      134.904047\n      9.156598\n      23.751320\n      67.917801\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nsbr_month= sbr_month.drop(\"Year\",axis=1)\nsbr_month = sbr_month.drop(\"Day\",axis=1)\nsbr_month.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.7.4. Overall Conditions\n\n\nShow the code\nsbr_cnd = sbr_df.groupby(['Conditions']).count()\nsbr_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n      2137\n    \n    \n      Overcast\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n      195\n    \n    \n      Partially cloudy\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n      1110\n    \n    \n      Rain\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n      108\n    \n    \n      Rain, Overcast\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n      177\n    \n    \n      Rain, Partially cloudy\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n      291\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions\ntotal_cnd = sbr_cnd['Year']\nexplode = [0.2, 0, 0, 0, 0, 0]\n\nconditions = sbr_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nplt.figure(figsize=(14, 8))\nplt.title(\"Santa Barbara\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.show()\n\n\n\n\n\n\n\n4.1.7.5. Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased time to time, start from January and reached the highest score at 188.139531 in May. Average Conditions in Santa Barbara County are Clear Partially Cloudy with 14% of rain.\n\n\n\n4.1.8. Ventura\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[34.282767009655736, -119.29185444090879], popup=\" Ventura\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n4.1.8.1. Data Distributions\n\n\nShow the code\nva_df = clean_df[(clean_df['County'] == 'Ventura')]\nva_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4018 entries, 19712 to 19024\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   Name                 4018 non-null   object        \n 1   Date time            4018 non-null   datetime64[ns]\n 2   Maximum Temperature  4018 non-null   float64       \n 3   Minimum Temperature  4018 non-null   float64       \n 4   Temperature          4018 non-null   float64       \n 5   Precipitation        4018 non-null   float64       \n 6   Wind Speed           4018 non-null   float64       \n 7   Wind Direction       4018 non-null   float64       \n 8   Visibility           4018 non-null   float64       \n 9   Cloud Cover          4018 non-null   float64       \n 10  Relative Humidity    4018 non-null   float64       \n 11  Conditions           4018 non-null   object        \n 12  Year                 4018 non-null   int64         \n 13  Month                4018 non-null   float64       \n 14  Day                  4018 non-null   float64       \n 15  County               4018 non-null   object        \n 16  State                4018 non-null   object        \n 17  Country              4018 non-null   object        \ndtypes: datetime64[ns](1), float64(11), int64(1), object(5)\nmemory usage: 596.4+ KB\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nva_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.show()\n\n\n\n\n\n\n\n4.1.8.2 Variables by Year\n\n\nShow the code\nva_year = va_df.groupby(['Year']).mean()\nva_year\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Month\n      Day\n    \n    \n      Year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2010\n      66.409589\n      52.473425\n      58.965753\n      0.063808\n      13.235068\n      180.074986\n      8.470137\n      38.153973\n      72.470685\n      6.526027\n      15.720548\n    \n    \n      2011\n      67.612877\n      52.909041\n      59.810685\n      0.034082\n      13.611781\n      179.373890\n      8.516164\n      34.098082\n      68.118521\n      6.526027\n      15.720548\n    \n    \n      2012\n      67.651639\n      53.091530\n      59.891530\n      0.024126\n      12.900000\n      179.548087\n      8.336339\n      33.189891\n      72.857377\n      6.513661\n      15.756831\n    \n    \n      2013\n      68.210411\n      53.086575\n      60.187123\n      0.009151\n      13.359452\n      175.278192\n      8.726027\n      32.112329\n      68.616274\n      6.526027\n      15.720548\n    \n    \n      2014\n      71.293425\n      55.629863\n      63.009863\n      0.026164\n      13.571781\n      175.561890\n      9.006849\n      27.549315\n      68.701534\n      6.526027\n      15.720548\n    \n    \n      2015\n      72.381918\n      56.403836\n      63.890137\n      0.012438\n      14.180548\n      179.349397\n      8.922466\n      27.351507\n      65.230658\n      6.526027\n      15.720548\n    \n    \n      2016\n      70.466120\n      55.205191\n      62.349454\n      0.027923\n      14.429235\n      178.668388\n      8.945355\n      33.098907\n      69.451995\n      6.513661\n      15.756831\n    \n    \n      2017\n      70.270685\n      55.339726\n      62.312329\n      0.039370\n      13.671233\n      181.878849\n      8.656712\n      31.718904\n      70.762247\n      6.526027\n      15.720548\n    \n    \n      2018\n      70.222192\n      55.159452\n      62.240548\n      0.021397\n      13.851507\n      180.851452\n      8.883562\n      31.352603\n      69.254658\n      6.526027\n      15.720548\n    \n    \n      2019\n      68.536986\n      53.999452\n      60.871507\n      0.054822\n      13.758904\n      177.696849\n      8.976438\n      33.752055\n      69.874192\n      6.526027\n      15.720548\n    \n    \n      2020\n      69.380055\n      53.490164\n      60.939344\n      0.016284\n      13.191530\n      184.955355\n      8.757923\n      29.098907\n      70.473197\n      6.513661\n      15.756831\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nva_year= va_year.drop(\"Month\",axis=1)\nva_year = va_year.drop(\"Day\",axis=1)\nva_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.8.3. Variables by Month\n\n\nShow the code\nva_month = va_df.groupby([\"Month\"]).mean()\nva_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      66.268328\n      48.541642\n      56.725513\n      0.079619\n      13.437830\n      136.428944\n      8.949853\n      22.164809\n      60.893109\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      64.756592\n      47.681994\n      55.960772\n      0.067524\n      13.877492\n      149.222926\n      8.782315\n      26.063023\n      65.048296\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      65.513490\n      50.037243\n      57.521701\n      0.064106\n      14.548094\n      172.609032\n      8.778886\n      32.488856\n      70.339619\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      67.067576\n      51.828485\n      59.266970\n      0.017515\n      15.006061\n      195.550909\n      8.857273\n      29.875152\n      70.117182\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      67.704985\n      54.239883\n      60.801466\n      0.007185\n      14.766276\n      200.846716\n      8.764809\n      35.523167\n      72.824868\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      69.610000\n      58.406667\n      63.570909\n      0.001091\n      12.649091\n      209.336848\n      8.314848\n      53.508182\n      77.045364\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      72.733724\n      61.342229\n      66.396481\n      0.001378\n      13.115836\n      223.671349\n      8.490323\n      44.943988\n      77.773196\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      73.666276\n      61.446921\n      66.831965\n      0.000440\n      12.980059\n      217.766833\n      8.327273\n      37.373314\n      77.871349\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      74.579394\n      60.426667\n      67.028182\n      0.002061\n      12.668485\n      199.780061\n      8.264545\n      30.500303\n      75.745545\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      74.184457\n      57.304985\n      65.369501\n      0.015015\n      12.878592\n      166.868798\n      9.307625\n      27.355132\n      67.620323\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      69.977879\n      51.545152\n      60.049394\n      0.029152\n      13.486061\n      148.490000\n      9.086364\n      21.876970\n      61.014242\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      65.412023\n      47.826393\n      55.937537\n      0.075425\n      13.963050\n      130.560205\n      9.007038\n      21.492962\n      58.922493\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nva_month= va_month.drop(\"Year\",axis=1)\nva_month = va_month.drop(\"Day\",axis=1)\nva_month.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.8.4. Overall Conditions\n\n\nShow the code\nva_cnd = va_df.groupby(['Conditions']).count()\nva_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n      2057\n    \n    \n      Overcast\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n      393\n    \n    \n      Partially cloudy\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n      1058\n    \n    \n      Rain\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n      86\n    \n    \n      Rain, Overcast\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n      162\n    \n    \n      Rain, Partially cloudy\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n      262\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions\ntotal_cnd = va_cnd['Year']\nexplode = [0.2, 0, 0, 0, 0, 0]\n\nconditions = va_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nplt.figure(figsize=(14, 8))\nplt.title(\"Ventura\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.show()\n\n\n\n\n\n\n\n4.1.8.5. Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased time to time, start from January and reached the highest score at 223.671349 in July. Average Conditions in Ventura County are Clear Partially Cloudy with 13% of rain.\n\n\n\n4.1.9. Riverside\n\n\nShow the code\nm = folium.Map(location=[35.512455820901536, -117.99343087406098], zoom_start= 6)\nfolium.TileLayer('Cartodb Positron').add_to(m)\nfolium.Marker(location=[33.94194882875181, -117.39404642504046], popup=\" Riverside\").add_to(m)\nfolium.GeoJson(\"Southern-California.geojson\", name=\"Southern California\").add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n4.1.9.1. Data Distributions\n\n\nShow the code\nrv_df = clean_df[(clean_df['County'] == 'Riverside')]\nrv_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4018 entries, 11317 to 10613\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype         \n---  ------               --------------  -----         \n 0   Name                 4018 non-null   object        \n 1   Date time            4018 non-null   datetime64[ns]\n 2   Maximum Temperature  4018 non-null   float64       \n 3   Minimum Temperature  4018 non-null   float64       \n 4   Temperature          4018 non-null   float64       \n 5   Precipitation        4018 non-null   float64       \n 6   Wind Speed           4018 non-null   float64       \n 7   Wind Direction       4018 non-null   float64       \n 8   Visibility           4018 non-null   float64       \n 9   Cloud Cover          4018 non-null   float64       \n 10  Relative Humidity    4018 non-null   float64       \n 11  Conditions           4018 non-null   object        \n 12  Year                 4018 non-null   int64         \n 13  Month                4018 non-null   float64       \n 14  Day                  4018 non-null   float64       \n 15  County               4018 non-null   object        \n 16  State                4018 non-null   object        \n 17  Country              4018 non-null   object        \ndtypes: datetime64[ns](1), float64(11), int64(1), object(5)\nmemory usage: 596.4+ KB\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nrv_df.boxplot(col)\nplt.xticks(rotation = 45)\nplt.show()\n\n\n\n\n\n\n\n4.1.9.2. Variables by Year\n\n\nShow the code\nrv_year = rv_df.groupby(['Year']).mean()\nrv_year\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Month\n      Day\n    \n    \n      Year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2010\n      76.757260\n      52.460822\n      63.493973\n      0.049096\n      11.880822\n      180.176192\n      8.991781\n      28.004384\n      58.239863\n      6.526027\n      15.720548\n    \n    \n      2011\n      77.316986\n      52.144658\n      63.518904\n      0.020548\n      11.577534\n      175.027616\n      9.105479\n      26.716438\n      55.007616\n      6.526027\n      15.720548\n    \n    \n      2012\n      79.852186\n      54.337432\n      65.798634\n      0.015929\n      11.940710\n      181.013361\n      9.525137\n      27.512568\n      53.488497\n      6.513661\n      15.756831\n    \n    \n      2013\n      79.226301\n      53.947123\n      65.320000\n      0.010575\n      11.796438\n      185.064356\n      9.326027\n      26.095890\n      51.961315\n      6.526027\n      15.720548\n    \n    \n      2014\n      81.195616\n      56.132329\n      67.488219\n      0.014000\n      12.142192\n      187.232438\n      9.730959\n      23.300274\n      51.897863\n      6.526027\n      15.720548\n    \n    \n      2015\n      80.583562\n      55.773699\n      67.089863\n      0.020712\n      12.191507\n      181.326658\n      9.476986\n      26.872055\n      51.966767\n      6.526027\n      15.720548\n    \n    \n      2016\n      80.366393\n      55.440984\n      66.692077\n      0.030328\n      12.636885\n      186.112350\n      9.351366\n      28.025956\n      53.146475\n      6.513661\n      15.756831\n    \n    \n      2017\n      80.581918\n      55.165205\n      66.616164\n      0.023233\n      13.053699\n      184.154849\n      9.451781\n      25.181918\n      56.641945\n      6.526027\n      15.720548\n    \n    \n      2018\n      79.944658\n      54.555890\n      65.985753\n      0.019836\n      13.506027\n      193.974438\n      9.452055\n      26.897534\n      54.189452\n      6.526027\n      15.720548\n    \n    \n      2019\n      77.499178\n      53.285753\n      64.144932\n      0.041233\n      13.089315\n      178.619671\n      9.311781\n      29.864384\n      57.761808\n      6.526027\n      15.720548\n    \n    \n      2020\n      80.461749\n      54.287978\n      66.140984\n      0.022896\n      13.278415\n      175.401721\n      9.450820\n      20.031694\n      51.267077\n      6.513661\n      15.756831\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nrv_year= rv_year.drop(\"Month\",axis=1)\nrv_year = rv_year.drop(\"Day\",axis=1)\nrv_year.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.9.3. Variables by Month\n\n\nShow the code\nrv_month = rv_df.groupby([\"Month\"]).mean()\nrv_month\n\n\n\n\n\n\n  \n    \n      \n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Day\n    \n    \n      Month\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1.0\n      67.883284\n      45.289150\n      55.803812\n      0.061026\n      9.696188\n      124.092757\n      9.202053\n      31.183871\n      52.760938\n      2015.000000\n      16.000000\n    \n    \n      2.0\n      68.342444\n      45.188103\n      56.065916\n      0.051865\n      10.722508\n      146.481833\n      9.197106\n      31.452733\n      56.212669\n      2015.009646\n      14.639871\n    \n    \n      3.0\n      71.976246\n      48.473021\n      59.376540\n      0.037185\n      12.389443\n      170.745455\n      9.353666\n      35.772434\n      58.719120\n      2015.000000\n      16.000000\n    \n    \n      4.0\n      76.221515\n      51.657273\n      62.960000\n      0.019909\n      14.266970\n      194.565970\n      9.559697\n      32.203333\n      55.072788\n      2015.000000\n      15.500000\n    \n    \n      5.0\n      78.710557\n      55.107038\n      65.668915\n      0.007302\n      14.388563\n      218.111290\n      9.464223\n      35.858358\n      59.008123\n      2015.000000\n      16.000000\n    \n    \n      6.0\n      86.969394\n      59.952121\n      71.764848\n      0.001939\n      14.288788\n      239.325818\n      9.021515\n      22.584848\n      58.137758\n      2015.000000\n      15.500000\n    \n    \n      7.0\n      92.652786\n      64.934897\n      77.135484\n      0.007185\n      14.422874\n      242.467595\n      9.745455\n      16.014370\n      53.817947\n      2015.000000\n      16.000000\n    \n    \n      8.0\n      94.508504\n      65.888856\n      78.419648\n      0.004282\n      14.176246\n      228.113314\n      9.433431\n      12.007331\n      51.408856\n      2015.000000\n      16.000000\n    \n    \n      9.0\n      91.515152\n      63.554242\n      75.873030\n      0.006424\n      13.473333\n      198.937848\n      9.807273\n      17.027576\n      51.332788\n      2015.000000\n      15.500000\n    \n    \n      10.0\n      83.162757\n      57.177419\n      68.841056\n      0.011994\n      11.830205\n      170.230938\n      9.187390\n      23.839296\n      52.086833\n      2015.000000\n      16.000000\n    \n    \n      11.0\n      74.299091\n      49.256364\n      60.733333\n      0.023758\n      10.298182\n      134.607061\n      9.352727\n      26.272121\n      48.792182\n      2015.000000\n      15.500000\n    \n    \n      12.0\n      66.373607\n      44.804399\n      54.750147\n      0.060850\n      9.531378\n      120.990557\n      9.220821\n      30.744868\n      52.425777\n      2015.000000\n      16.000000\n    \n  \n\n\n\n\n\n\nShow the code\nplt.style.use('ggplot')\nrv_month= rv_month.drop(\"Year\",axis=1)\nrv_month = rv_month.drop(\"Day\",axis=1)\nrv_month.plot(figsize=(14, 8))\nplt.show()\n\n\n\n\n\n\n\n4.1.9.4. Overall Conditions\n\n\nShow the code\nrv_cnd = rv_df.groupby(['Conditions']).count()\nrv_cnd\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Date time\n      Maximum Temperature\n      Minimum Temperature\n      Temperature\n      Precipitation\n      Wind Speed\n      Wind Direction\n      Visibility\n      Cloud Cover\n      Relative Humidity\n      Year\n      Month\n      Day\n      County\n      State\n      Country\n    \n    \n      Conditions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Clear\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n      2340\n    \n    \n      Overcast\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n      121\n    \n    \n      Partially cloudy\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n      1064\n    \n    \n      Rain\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n      39\n    \n    \n      Rain, Overcast\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n      213\n    \n    \n      Rain, Partially cloudy\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n      241\n    \n  \n\n\n\n\n\n\nShow the code\n# conditions\ntotal_cnd = rv_cnd['Year']\nexplode = [0.2, 0, 0, 0, 0, 0]\n\nconditions = rv_cnd.index\n\n# Seaborn color palette to plot pie chart\ncolors = sns.color_palette('pastel')\n\n# create pie chart using matplotlib\nplt.figure(figsize=(14, 8))\nplt.title(\"Riverside\", loc='left',fontdict = font1)\nplt.pie(total_cnd, labels=conditions, colors=colors,\n        autopct='%.0f%%',explode=explode, shadow=True, rotatelabels='true')\nplt.show()\n\n\n\n\n\n\n\n4.1.9.5. Description\nWeather variables relatively constant on yearly basis. On monthly basis all variables also remain constant except Wind Direction. Wind Direction increased time to time, start from January and reached the highest score at 242.467595 in July. Average Conditions in Riverside County are Clear Partially Cloudy with 12% of rain.\n\n\n\n\n4.2. Trend\n\nShow the code\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\nfilename = \"Southern-California.geojson\"\nfile = open(filename)\ndf = gpd.read_file(file)\n\n# Declare a list that is to be converted into a column\ncounty = ['San Luis Obispo, CA, United States', 'Riverside, CA, United States', \n          'Imperial, CA, United States','Santa Barbara, CA, United States',\n          'Ventura, CA, United States','Los Angeles, CA, United States',\n          'San Diego, CA, United States','Orange, CA, United States','San Bernardino, CA, United States']\n  \n# Using 'Address' as the column name\n# and equating it to the list\ndf['Name'] = county\n\nfrom mitosheet import *; register_analysis(\"id-nyqlbtjbky\");\n    \n# Pivoted into clean_df\ntmp_df = clean_df[['Temperature', 'Conditions', 'Name']]\npivot_table = tmp_df.pivot_table(\n    index=['Name'],\n    columns=['Conditions'],\n    values=['Temperature'],\n    aggfunc={'Temperature': ['mean']}\n)\npivot_table.set_axis([flatten_column_header(col) for col in pivot_table.keys()], axis=1, inplace=True)\ntemp_df_pivot = pivot_table.reset_index()\n\ndf_map =df.set_index('Name').join(temp_df_pivot.set_index('Name'))\n\n\n4.2.1. Maximum Temperature\n\n4.2.1.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Maximum Temperature'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Maximum Temperature'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Maximum Temperature'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Maximum Temperature'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Maximum Temperature'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Maximum Temperature'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Maximum Temperature'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Maximum Temperature'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Maximum Temperature'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\" Max Temperature\")\nplt.show()\n\n\n\n\n\n\n\n4.2.1.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Maximum Temperature'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Maximum Temperature'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Maximum Temperature'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Maximum Temperature'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Maximum Temperature'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Maximum Temperature'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Maximum Temperature'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Maximum Temperature'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Maximum Temperature'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\" Max Temperature\")\nplt.show()\n\n\n\n\n\n\n\n\n4.2.2. Minimum Temperature\n\n4.2.2.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Minimum Temperature'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Minimum Temperature'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Minimum Temperature'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Minimum Temperature'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Minimum Temperature'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Minimum Temperature'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Minimum Temperature'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Minimum Temperature'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Minimum Temperature'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\" Min Temperature\")\nplt.show()\n\n\n\n\n\n\n\n4.2.2.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Minimum Temperature'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Minimum Temperature'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Minimum Temperature'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Minimum Temperature'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Minimum Temperature'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Minimum Temperature'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Minimum Temperature'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Minimum Temperature'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Minimum Temperature'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\" Min Temperature\")\nplt.show()\n\n\n\n\n\n\n\n\n4.2.3. Temperature\n\n4.2.3.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Temperature'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Temperature'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Temperature'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Temperature'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Temperature'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Temperature'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Temperature'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Temperature'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Temperature'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\"Temperature\")\nplt.show()\n\n\n\n\n\n\n\n4.2.3.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Temperature'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Temperature'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Temperature'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Temperature'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Temperature'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Temperature'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Temperature'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Temperature'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Temperature'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\"Temperature\")\nplt.show()\n\n\n\n\n\n\n\n\n4.2.4. Precipitation\n\n4.2.4.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Precipitation'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Precipitation'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Precipitation'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Precipitation'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Precipitation'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Precipitation'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Precipitation'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Precipitation'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Precipitation'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\"Precipitation\")\nplt.show()\n\n\n\n\n\n\n\n4.2.4.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Precipitation'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Precipitation'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Precipitation'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Precipitation'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Precipitation'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Precipitation'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Precipitation'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Precipitation'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Precipitation'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\"Precipitation\")\nplt.show()\n\n\n\n\n\n\n\n\n4.2.5. Wind Speed\n\n4.2.5.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Wind Speed'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Wind Speed'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Wind Speed'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Wind Speed'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Wind Speed'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Wind Speed'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Wind Speed'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Wind Speed'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Wind Speed'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\"Wind Speed\")\nplt.show()\n\n\n\n\n\n\n\n4.2.5.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Wind Speed'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Wind Speed'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Wind Speed'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Wind Speed'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Wind Speed'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Wind Speed'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Wind Speed'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Wind Speed'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Wind Speed'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\"Wind Speed\")\nplt.show()\n\n\n\n\n\n\n\n\n4.2.6. Wind Direction\n\n4.2.6.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Wind Direction'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Wind Direction'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Wind Direction'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Wind Direction'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Wind Direction'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Wind Direction'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Wind Direction'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Wind Direction'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Wind Direction'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\"Wind Direction\")\nplt.show()\n\n\n\n\n\n\n\n4.2.6.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Wind Direction'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Wind Direction'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Wind Direction'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Wind Direction'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Wind Direction'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Wind Direction'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Wind Direction'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Wind Direction'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Wind Direction'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\"Wind Direction\")\nplt.show()\n\n\n\n\n\n\n\n\n4.2.7. Visibility\n\n4.2.7.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Visibility'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Visibility'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Visibility'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Visibility'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Visibility'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Visibility'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Visibility'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Visibility'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Visibility'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\"Visibility\")\nplt.show()\n\n\n\n\n\n\n\n4.2.7.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Visibility'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Visibility'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Visibility'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Visibility'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Visibility'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Visibility'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Visibility'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Visibility'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Visibility'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\"Visibility\")\nplt.show()\n\n\n\n\n\n\n\n\n4.2.8. Cloud Cover\n\n4.2.8.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Cloud Cover'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Cloud Cover'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Cloud Cover'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Cloud Cover'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Cloud Cover'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Cloud Cover'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Cloud Cover'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Cloud Cover'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Cloud Cover'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\"Cloud Cover\")\nplt.show()\n\n\n\n\n\n\n\n4.2.8.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Cloud Cover'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Cloud Cover'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Cloud Cover'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Cloud Cover'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Cloud Cover'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Cloud Cover'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Cloud Cover'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Cloud Cover'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Cloud Cover'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\"Cloud Cover\")\nplt.show()\n\n\n\n\n\n\n\n\n4.2.9. Relative Humidity\n\n4.2.9.1. Yearly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_year['Relative Humidity'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_year['Relative Humidity'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_year['Relative Humidity'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_year['Relative Humidity'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_year['Relative Humidity'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_year['Relative Humidity'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_year['Relative Humidity'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_year['Relative Humidity'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_year['Relative Humidity'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Year\")\nplt.ylabel(\"Relative Humidity\")\nplt.show()\n\n\n\n\n\n\n\n4.2.9.2. Monthly Trend\n\n\nShow the code\nplt.style.use('ggplot')\nplt.figure(figsize=(14, 8))\nax = sb_month['Relative Humidity'].plot(marker='.', color='tab:blue', label= 'San Bernardino')\nax1= sd_month['Relative Humidity'].plot(marker='.', color='tab:orange', label= 'San Diego')\nax2= imp_month['Relative Humidity'].plot(marker='.', color='tab:green', label= 'Imperial')\nax3= la_month['Relative Humidity'].plot(marker='.', color='tab:red', label= 'Los Angeles')\nax4= or_month['Relative Humidity'].plot(marker='.', color='tab:purple', label= 'Orange')\nax5= slo_month['Relative Humidity'].plot(marker='.', color='tab:brown', label= 'San Luis Obispo')\nax6= sbr_month['Relative Humidity'].plot(marker='.', color='tab:pink', label= 'Santa Barbara')\nax7= va_month['Relative Humidity'].plot(marker='.', color='tab:gray', label= 'Ventura')\nax8= rv_month['Relative Humidity'].plot(marker='.', color='tab:olive', label= 'Riverside')\nplt.legend();\nplt.xlabel(\"Month\")\nplt.ylabel(\"Relative Humidity\")\nplt.show()\n\n\n\n\n\n\n\n\n\n4.3. Correlation\n\nShow the code\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\nfilename = \"Southern-California.geojson\"\nfile = open(filename)\ndf = gpd.read_file(file)\n\n# Declare a list that is to be converted into a column\ncounty = ['San Luis Obispo, CA, United States', 'Riverside, CA, United States', \n          'Imperial, CA, United States','Santa Barbara, CA, United States',\n          'Ventura, CA, United States','Los Angeles, CA, United States',\n          'San Diego, CA, United States','Orange, CA, United States','San Bernardino, CA, United States']\n  \n# Using 'Address' as the column name\n# and equating it to the list\ndf['Name'] = county\n\n\n\nShow the code\nfrom shapely import wkt\ndf['geometry'] = df.geometry.apply(lambda x: wkt.dumps(x))\ndf.head(2)\n\n\n\n\n\n\n  \n    \n      \n      felt-clipSource\n      felt-color\n      felt-showArea\n      felt-type\n      geometry\n      Name\n    \n  \n  \n    \n      0\n      {'geometry': {'coordinates': [[[35.79776624517...\n      RED\n      False\n      Polygon\n      MULTILINESTRING ((-121.4387512207031392 35.797...\n      San Luis Obispo, CA, United States\n    \n    \n      1\n      {'geometry': {'coordinates': [[[33.88865750124...\n      RED\n      False\n      Polygon\n      MULTILINESTRING ((-117.6773071289062642 33.888...\n      Riverside, CA, United States\n    \n  \n\n\n\n\n\n\nShow the code\n# By using str.replace()\ndf['geometry'] = df['geometry'].str.replace('MULTILINESTRING','POLYGON')\ndf['geometry'] = gpd.GeoSeries.from_wkt(df['geometry'])\ndf.head(2)\n\n\n\n\n\n\n  \n    \n      \n      felt-clipSource\n      felt-color\n      felt-showArea\n      felt-type\n      geometry\n      Name\n    \n  \n  \n    \n      0\n      {'geometry': {'coordinates': [[[35.79776624517...\n      RED\n      False\n      Polygon\n      POLYGON ((-121.43875 35.79777, -121.39481 35.7...\n      San Luis Obispo, CA, United States\n    \n    \n      1\n      {'geometry': {'coordinates': [[[33.88865750124...\n      RED\n      False\n      Polygon\n      POLYGON ((-117.67731 33.88866, -117.67456 33.8...\n      Riverside, CA, United States\n    \n  \n\n\n\n\n\n4.3.1. Conditions vs Temperature\n\nShow the code\nfrom mitosheet import *; register_analysis(\"id-nyqlbtjbky\");\n    \n# Pivoted into clean_df\ntmp_df = clean_df[['Temperature', 'Conditions', 'Name']]\npivot_table = tmp_df.pivot_table(\n    index=['Name'],\n    columns=['Conditions'],\n    values=['Temperature'],\n    aggfunc={'Temperature': ['mean']}\n)\npivot_table.set_axis([flatten_column_header(col) for col in pivot_table.keys()], axis=1, inplace=True)\ntemp_df_pivot = pivot_table.reset_index()\n\ndf_map =df.set_index('Name').join(temp_df_pivot.set_index('Name'))\ndf_map = df_map.reset_index()\n\n\n\nShow the code\ndf_map.head(2)\n\n\n\n\n\n\n  \n    \n      \n      Name\n      felt-clipSource\n      felt-color\n      felt-showArea\n      felt-type\n      geometry\n      Temperature mean Clear\n      Temperature mean Overcast\n      Temperature mean Partially cloudy\n      Temperature mean Rain\n      Temperature mean Rain, Overcast\n      Temperature mean Rain, Partially cloudy\n      Temperature mean Snow\n      Temperature mean Snow, Overcast\n      Temperature mean Snow, Partially cloudy\n    \n  \n  \n    \n      0\n      San Luis Obispo, CA, United States\n      {'geometry': {'coordinates': [[[35.79776624517...\n      RED\n      False\n      Polygon\n      POLYGON ((-121.43875 35.79777, -121.39481 35.7...\n      59.701534\n      58.757297\n      59.781537\n      53.954545\n      55.724820\n      53.666527\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      Riverside, CA, United States\n      {'geometry': {'coordinates': [[[33.88865750124...\n      RED\n      False\n      Polygon\n      POLYGON ((-117.67731 33.88866, -117.67456 33.8...\n      68.675342\n      59.590083\n      63.717293\n      63.115385\n      55.156808\n      57.753112\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\n\n4.3.1.1. Clear - Temperature\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Temperature mean Clear',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Temperature mean on Clear Condition\", fontsize=16);\n\n\n\n\n\n\n\n4.3.1.2. Rain - Temperature\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Temperature mean Rain',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Temperature mean on Rain Condition\", fontsize=16);\n\n\n\n\n\n\n\n4.3.1.3. Overcast\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Temperature mean Overcast',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Temperature mean on Overcast Condition\", fontsize=16);\n\n\n\n\n\n\n\n\n4.3.2. Conditions vs Wind Direction\n\nShow the code\nfrom mitosheet import *; register_analysis(\"id-nyqlbtjbky\");\n    \n# Pivoted into clean_df\ntmp_df = clean_df[['Wind Direction', 'Conditions', 'Name']]\npivot_table = tmp_df.pivot_table(\n    index=['Name'],\n    columns=['Conditions'],\n    values=['Wind Direction'],\n    aggfunc={'Wind Direction': ['mean']}\n)\npivot_table.set_axis([flatten_column_header(col) for col in pivot_table.keys()], axis=1, inplace=True)\ntemp_df_pivot = pivot_table.reset_index()\n\ndf_map =df.set_index('Name').join(temp_df_pivot.set_index('Name'))\ndf_map = df_map.reset_index()\n\n\n4.3.2.1 Clear - Wind Direction\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Wind Direction mean Clear',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Wind Direction mean on Clear Condition\", fontsize=16);\n\n\n\n\n\n\n\n4.3.2.2. Rain - Wind Direction\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Wind Direction mean Rain',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Wind Direction mean on Rain Condition\");\n\n\n\n\n\n\n\n4.3.3.3. Overcast - Wind Direction\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Wind Direction mean Overcast',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Wind Direction on Overcast Condition\");\n\n\n\n\n\n\n\n\n4.3.3. Condition vs Relative Humidity\n\nShow the code\nfrom mitosheet import *; register_analysis(\"id-nyqlbtjbky\");\n    \n# Pivoted into clean_df\ntmp_df = clean_df[['Relative Humidity', 'Conditions', 'Name']]\npivot_table = tmp_df.pivot_table(\n    index=['Name'],\n    columns=['Conditions'],\n    values=['Relative Humidity'],\n    aggfunc={'Relative Humidity': ['mean']}\n)\npivot_table.set_axis([flatten_column_header(col) for col in pivot_table.keys()], axis=1, inplace=True)\ntemp_df_pivot = pivot_table.reset_index()\n\ndf_map =df.set_index('Name').join(temp_df_pivot.set_index('Name'))\ndf_map = df_map.reset_index()\n\n\n4.3.3.1. Clear - Relative Humidity\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Relative Humidity mean Clear',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Relative Humidity mean on Clear Condition\");\n\n\n\n\n\n\n\n4.3.3.2. Rain - Relative Humidity\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Relative Humidity mean Rain',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Relative Humidity mean on Rain Condition\");\n\n\n\n\n\n\n\n4.3.3.3. Overcast - Relative Humidity\n\n\nShow the code\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\ndf_map.plot(ax=ax, column='Relative Humidity mean Overcast',cmap='rainbow',legend=True)\ndf_map.apply(lambda x: ax.annotate(text=x['Name'], xy=x.geometry.centroid.coords[0], ha='center'), axis=1)\nplt.title(\"Relative Humidity mean on Overcast Condition\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "{‘data science, statistics, and more…’}",
    "section": "",
    "text": "california\n\n\nanalysis\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nSep 7, 2022\n\n\nLulus Adhitya\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncalifornia\n\n\nwildfire\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJul 24, 2022\n\n\nLulus Adhitya\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncalifornia\n\n\nwildfire\n\n\n\n\n\n\n\n\n\n\n\nJul 24, 2022\n\n\nLulus Adhitya\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJul 20, 2022\n\n\nLulus Adhitya\n\n\n\n\n\n\nNo matching items"
  }
]